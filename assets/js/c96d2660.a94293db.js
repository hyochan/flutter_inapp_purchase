"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6835],{571:(e,n,i)=>{i.d(n,{A:()=>s});var r=i(6540),l=i(4848);function t({className:e="adfit",style:n,unit:i,height:t,width:s}){return(0,r.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const r=n.querySelectorAll(".kakao_ad_area"),l=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');r.forEach(e=>e.remove()),l.forEach(e=>e.remove());const a=document.createElement("ins"),o=document.createElement("script");a.className="kakao_ad_area",a.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",a.setAttribute("data-ad-width",s.toString()),a.setAttribute("data-ad-height",t.toString()),a.setAttribute("data-ad-unit",i),n.appendChild(a),n.appendChild(o)},100);return()=>clearTimeout(n)},[e,i,t,s]),(0,l.jsx)("div",{style:n,children:(0,l.jsx)("div",{className:e})})}function s(){return(0,l.jsx)(t,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},5792:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/alternative-billing","title":"Alternative Billing","description":"This guide explains how to implement alternative billing functionality in your app using flutterinapppurchase, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing.","source":"@site/versioned_docs/version-7.0/guides/alternative-billing.md","sourceDirName":"guides","slug":"/guides/alternative-billing","permalink":"/flutter_inapp_purchase/docs/7.0/guides/alternative-billing","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-7.0/guides/alternative-billing.md","tags":[],"version":"7.0","frontMatter":{"title":"Alternative Billing","sidebar_label":"Alternative Billing"}}');var l=i(4848),t=i(8453),s=i(571);const a={title:"Alternative Billing",sidebar_label:"Alternative Billing"},o="Alternative Billing",c={},d=[{value:"Official Documentation",id:"official-documentation",level:2},{value:"Apple (iOS)",id:"apple-ios",level:3},{value:"Google Play (Android)",id:"google-play-android",level:3},{value:"Platform Updates (2024)",id:"platform-updates-2024",level:3},{value:"iOS",id:"ios",level:4},{value:"Android",id:"android",level:4},{value:"Overview",id:"overview",level:2},{value:"iOS Alternative Billing (External Purchase URLs)",id:"ios-alternative-billing-external-purchase-urls",level:2},{value:"iOS Native Configuration",id:"ios-native-configuration",level:3},{value:"1. Add Entitlements",id:"1-add-entitlements",level:4},{value:"2. Configure Info.plist",id:"2-configure-infoplist",level:4},{value:"iOS Basic Usage (Info.plist URLs)",id:"ios-basic-usage-infoplist-urls",level:3},{value:"iOS Custom URL (iOS 18.2+)",id:"ios-custom-url-ios-182",level:3},{value:"iOS Notice Sheet (iOS 18.2+)",id:"ios-notice-sheet-ios-182",level:3},{value:"Important iOS Notes",id:"important-ios-notes",level:3},{value:"Android Alternative Billing",id:"android-alternative-billing",level:2},{value:"Android Native Configuration",id:"android-native-configuration",level:3},{value:"Mode 1: Alternative Billing Only",id:"mode-1-alternative-billing-only",level:3},{value:"Mode 2: User Choice Billing",id:"mode-2-user-choice-billing",level:3},{value:"Configuring Alternative Billing Mode",id:"configuring-alternative-billing-mode",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"General",id:"general",level:3},{value:"iOS Specific",id:"ios-specific",level:3},{value:"Android Specific",id:"android-specific",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"iOS Issues",id:"ios-issues",level:3},{value:"&quot;Feature not supported&quot;",id:"feature-not-supported",level:4},{value:"&quot;External URL not opening&quot;",id:"external-url-not-opening",level:4},{value:"&quot;User stuck on external site&quot;",id:"user-stuck-on-external-site",level:4},{value:"Android Issues",id:"android-issues",level:3},{value:"&quot;Alternative billing not available&quot;",id:"alternative-billing-not-available",level:4},{value:"&quot;Token creation failed&quot;",id:"token-creation-failed",level:4},{value:"&quot;User choice dialog not showing&quot;",id:"user-choice-dialog-not-showing",level:4},{value:"Platform Requirements",id:"platform-requirements",level:2},{value:"See Also",id:"see-also",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"alternative-billing",children:"Alternative Billing"})}),"\n",(0,l.jsx)(s.A,{}),"\n",(0,l.jsx)(n.p,{children:"This guide explains how to implement alternative billing functionality in your app using flutter_inapp_purchase, allowing you to use external payment systems alongside or instead of the App Store/Google Play billing."}),"\n",(0,l.jsx)(n.h2,{id:"official-documentation",children:"Official Documentation"}),"\n",(0,l.jsx)(n.h3,{id:"apple-ios",children:"Apple (iOS)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/external-purchase",children:"StoreKit External Purchase Documentation"})," - Official StoreKit external purchase API reference"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," - Entitlement configuration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/storekit/externalpurchasecustomlink",children:"ExternalPurchaseCustomLink API"})," - Custom link API documentation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://www.openiap.dev/docs/external-purchase",children:"OpenIAP External Purchase"})," - OpenIAP external purchase specification"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"google-play-android",children:"Google Play (Android)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative",children:"Alternative Billing APIs"})," - Official Android alternative billing API guide"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/13821247",children:"User Choice Billing Overview"})," - Understanding user choice billing"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12570971",children:"User Choice Billing Pilot"})," - Enrollment and setup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/10281818",children:"Payments Policy"})," - Google Play's payment policy"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/user-choice",children:"UX Guidelines (User Choice)"})," - User choice billing UX guidelines"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://developer.android.com/google/play/billing/alternative/interim-ux/billing-choice",children:"UX Guidelines (Alternative Billing)"})," - Alternative billing UX guidelines"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12348241",children:"EEA Alternative Billing"})," - European Economic Area specific guidance"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"platform-updates-2024",children:"Platform Updates (2024)"}),"\n",(0,l.jsx)(n.h4,{id:"ios",children:"iOS"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"US apps can use StoreKit External Purchase Link Entitlement"}),"\n",(0,l.jsx)(n.li,{children:"System disclosure sheet shown each time external link is accessed"}),"\n",(0,l.jsx)(n.li,{children:"Commission: 27% (reduced from 30%) for first year, 12% for subsequent years"}),"\n",(0,l.jsx)(n.li,{children:"EU apps have additional flexibility for external purchases"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"android",children:"Android"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"As of March 13, 2024: Alternative billing APIs must be used (manual reporting deprecated)"}),"\n",(0,l.jsx)(n.li,{children:"Service fee reduced by 4% when using alternative billing (e.g., 15% \u2192 11%)"}),"\n",(0,l.jsx)(n.li,{children:"Available in South Korea, India, and EEA"}),"\n",(0,l.jsx)(n.li,{children:"Gaming and non-gaming apps eligible (varies by region)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"Alternative billing enables developers to offer payment options outside of the platform's standard billing systems:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": Redirect users to external websites for payment (iOS 16.0+)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Use Google Play's alternative billing options (requires approval)"]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{title:"Platform Approval Required",type:"warning",children:[(0,l.jsx)(n.p,{children:"Both platforms require special approval to use alternative billing:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": Must be approved for external purchase entitlement"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Must be approved for alternative billing in Google Play Console"]}),"\n"]})]}),"\n",(0,l.jsx)(n.h2,{id:"ios-alternative-billing-external-purchase-urls",children:"iOS Alternative Billing (External Purchase URLs)"}),"\n",(0,l.jsx)(n.p,{children:"On iOS, alternative billing works by redirecting users to an external website where they complete the purchase."}),"\n",(0,l.jsx)(n.h3,{id:"ios-native-configuration",children:"iOS Native Configuration"}),"\n",(0,l.jsx)(n.p,{children:"To enable iOS alternative billing, you need to configure your Xcode project:"}),"\n",(0,l.jsx)(n.h4,{id:"1-add-entitlements",children:"1. Add Entitlements"}),"\n",(0,l.jsxs)(n.p,{children:["Open your ",(0,l.jsx)(n.code,{children:"ios/Runner/Runner.entitlements"})," file and add:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    \x3c!-- Required: Enable external purchase --\x3e\n    <key>com.apple.developer.storekit.external-purchase</key>\n    <true/>\n\n    \x3c!-- Optional: Enable external purchase link (iOS 18.2+) --\x3e\n    <key>com.apple.developer.storekit.external-purchase-link</key>\n    <true/>\n\n    \x3c!-- Optional: Enable streaming entitlement (music apps only) --\x3e\n    <key>com.apple.developer.storekit.external-purchase-link-streaming</key>\n    <true/>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsx)(n.h4,{id:"2-configure-infoplist",children:"2. Configure Info.plist"}),"\n",(0,l.jsxs)(n.p,{children:["Open your ",(0,l.jsx)(n.code,{children:"ios/Runner/Info.plist"})," and add:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n    \x3c!-- Countries where external purchases are supported (ISO 3166-1 alpha-2) --\x3e\n    <key>SKExternalPurchase</key>\n    <array>\n        <string>kr</string>\n        <string>nl</string>\n        <string>de</string>\n        <string>fr</string>\n    </array>\n\n    \x3c!-- Optional: External purchase URLs per country (iOS 15.4+) --\x3e\n    <key>SKExternalPurchaseLink</key>\n    <dict>\n        <key>kr</key>\n        <string>https://your-site.com/kr/checkout</string>\n        <key>nl</key>\n        <string>https://your-site.com/nl/checkout</string>\n    </dict>\n\n    \x3c!-- Optional: Multiple URLs per country (iOS 17.5+, up to 5) --\x3e\n    <key>SKExternalPurchaseMultiLink</key>\n    <dict>\n        <key>fr</key>\n        <array>\n            <string>https://your-site.com/fr</string>\n            <string>https://your-site.com/global-sale</string>\n        </array>\n    </dict>\n\n    \x3c!-- Optional: Custom link regions (iOS 18.1+) --\x3e\n    <key>SKExternalPurchaseCustomLinkRegions</key>\n    <array>\n        <string>de</string>\n        <string>fr</string>\n        <string>nl</string>\n    </array>\n\n    \x3c!-- Optional: Streaming regions (music apps, iOS 18.2+) --\x3e\n    <key>SKExternalPurchaseLinkStreamingRegions</key>\n    <array>\n        <string>at</string>\n        <string>de</string>\n        <string>fr</string>\n        <string>nl</string>\n        <string>is</string>\n        <string>no</string>\n    </array>\n</dict>\n</plist>\n'})}),"\n",(0,l.jsxs)(n.admonition,{title:"iOS Requirements",type:"warning",children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Approval Required"}),": You must obtain approval from Apple to use external purchase features"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"URL Format"}),": URLs must use HTTPS, have no query parameters, and be 1,000 characters or fewer"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Link Limits"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Music streaming apps: up to 5 links per country (EU + Iceland, Norway)"}),"\n",(0,l.jsx)(n.li,{children:"Other apps: 1 link per country"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Supported Regions"}),": Different features support different regions (EU, US, etc.)"]}),"\n"]}),(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://developer.apple.com/documentation/bundleresources/entitlements/com.apple.developer.storekit.external-purchase-link",children:"External Purchase Link Entitlement"})," for details."]})]}),"\n",(0,l.jsx)(n.h3,{id:"ios-basic-usage-infoplist-urls",children:"iOS Basic Usage (Info.plist URLs)"}),"\n",(0,l.jsxs)(n.p,{children:["When URLs are configured in Info.plist, use ",(0,l.jsx)(n.code,{children:"requestPurchase"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nFuture<void> purchaseWithExternalUrl() async {\n  try {\n    await FlutterInappPurchase.instance.requestPurchase(\n      RequestPurchaseProps.inApp((\n        ios: RequestPurchaseIosProps(\n          sku: 'com.example.product',\n          quantity: 1,\n        ),\n        useAlternativeBilling: true,\n      )),\n    );\n\n    // User will be redirected to the external URL configured in Info.plist\n    // No purchase callback will fire\n    print('User redirected to external payment site');\n  } catch (e) {\n    print('Alternative billing error: $e');\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ios-custom-url-ios-182",children:"iOS Custom URL (iOS 18.2+)"}),"\n",(0,l.jsxs)(n.p,{children:["For dynamic URLs or runtime configuration, use ",(0,l.jsx)(n.code,{children:"presentExternalPurchaseLinkIOS"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:io';\n\nFuture<void> purchaseWithCustomUrl(String productId) async {\n  if (!Platform.isIOS) return;\n\n  try {\n    final result = await FlutterInappPurchase.instance\n        .presentExternalPurchaseLinkIOS('https://your-site.com/checkout');\n\n    if (result.error != null) {\n      print('Error: ${result.error}');\n    } else if (result.success) {\n      print('User redirected to external website');\n      // Implement deep linking to return users to app\n    }\n  } catch (e) {\n    print('External purchase link error: $e');\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ios-notice-sheet-ios-182",children:"iOS Notice Sheet (iOS 18.2+)"}),"\n",(0,l.jsx)(n.p,{children:"Check availability and present external purchase notice:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nFuture<void> showExternalPurchaseNotice() async {\n  try {\n    // Check if external purchase notice can be presented\n    final canPresent = await FlutterInappPurchase.instance\n        .canPresentExternalPurchaseNoticeIOS();\n\n    if (!canPresent) {\n      print('External purchase notice not available');\n      return;\n    }\n\n    // Present the notice sheet\n    final result = await FlutterInappPurchase.instance\n        .presentExternalPurchaseNoticeSheetIOS();\n\n    if (result.success) {\n      print('User acknowledged external purchase notice');\n      // Proceed with external purchase flow\n    }\n  } catch (e) {\n    print('Notice sheet error: $e');\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"important-ios-notes",children:"Important iOS Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS 16.0+ Required"}),": External purchase links only work on iOS 16.0 and later"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS 18.2+ for Dynamic URLs"}),": ",(0,l.jsx)(n.code,{children:"presentExternalPurchaseLinkIOS"})," requires iOS 18.2+"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No Purchase Callback"}),": Purchase streams will NOT emit events when using external URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Link Required"}),": Implement deep linking to return users to your app after purchase"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Manual Validation"}),": You must validate purchases on your backend server"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"android-alternative-billing",children:"Android Alternative Billing"}),"\n",(0,l.jsx)(n.p,{children:"Android supports two alternative billing modes:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Alternative Billing Only"}),": Users can ONLY use your payment system"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User Choice Billing"}),": Users choose between Google Play or your payment system"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-native-configuration",children:"Android Native Configuration"}),"\n",(0,l.jsx)(n.p,{children:"No special configuration is needed in your Android project files. Alternative billing is configured at runtime when initializing the connection."}),"\n",(0,l.jsx)(n.p,{children:"However, you must:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Enroll in Google Play Console"}),": Apply for alternative billing in your Google Play Console"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Get Approval"}),": Wait for Google's approval"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Configure in Console"}),": Set up alternative billing settings in Play Console"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"https://support.google.com/googleplay/android-developer/answer/12570971",children:"User Choice Billing Pilot"})," for enrollment details."]}),"\n",(0,l.jsx)(n.h3,{id:"mode-1-alternative-billing-only",children:"Mode 1: Alternative Billing Only"}),"\n",(0,l.jsx)(n.p,{children:"This mode requires a manual 3-step flow:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:io';\n\nFuture<void> handleAlternativeBillingOnly(String productId) async {\n  if (!Platform.isAndroid) return;\n\n  try {\n    // Step 1: Check availability\n    final isAvailable = await FlutterInappPurchase.instance\n        .checkAlternativeBillingAvailabilityAndroid();\n\n    if (!isAvailable) {\n      print('Alternative billing not available');\n      return;\n    }\n\n    // Step 2: Show information dialog\n    final userAccepted = await FlutterInappPurchase.instance\n        .showAlternativeBillingDialogAndroid();\n\n    if (!userAccepted) {\n      print('User declined');\n      return;\n    }\n\n    // Step 2.5: Process payment with your payment system\n    // ... your payment processing logic here ...\n\n    // Step 3: Create reporting token (after successful payment)\n    final token = await FlutterInappPurchase.instance\n        .createAlternativeBillingTokenAndroid();\n\n    if (token != null) {\n      // Step 4: Report token to Google Play backend within 24 hours\n      await reportToGoogleBackend(token);\n      print('Alternative billing completed');\n    }\n  } catch (e) {\n    print('Alternative billing error: $e');\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mode-2-user-choice-billing",children:"Mode 2: User Choice Billing"}),"\n",(0,l.jsx)(n.p,{children:"With user choice, Google automatically shows a selection dialog:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:io';\n\nFuture<void> initializeWithUserChoice() async {\n  if (!Platform.isAndroid) return;\n\n  // Initialize with user choice mode\n  await FlutterInappPurchase.instance.initialize();\n  await FlutterInappPurchase.instance.initConnection(\n    alternativeBillingModeAndroid: AlternativeBillingModeAndroid.UserChoice,\n  );\n\n  // Set up listeners\n  FlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\n    // This fires if user selects Google Play\n    print('Google Play purchase: ${purchase.productId}');\n  });\n\n  FlutterInappPurchase.instance.userChoiceBillingAndroid.listen((details) {\n    // This fires if user selects alternative billing\n    print('Alternative billing selected: ${details.products}');\n    print('Token: ${details.externalTransactionToken}');\n    // Process payment with your system and report token\n  });\n}\n\nFuture<void> handleUserChoicePurchase(String productId) async {\n  if (!Platform.isAndroid) return;\n\n  try {\n    // Google will show selection dialog automatically\n    await FlutterInappPurchase.instance.requestPurchase(\n      RequestPurchaseProps.inApp((\n        android: RequestPurchaseAndroidProps(skus: [productId]),\n        useAlternativeBilling: true,\n      )),\n    );\n\n    // If user selects Google Play: purchaseUpdated stream\n    // If user selects alternative: userChoiceBillingAndroid stream\n  } catch (e) {\n    print('Purchase error: $e');\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"configuring-alternative-billing-mode",children:"Configuring Alternative Billing Mode"}),"\n",(0,l.jsx)(n.p,{children:"Set the billing mode when initializing the connection:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nFuture<void> initWithAlternativeBilling() async {\n  await FlutterInappPurchase.instance.initialize();\n\n  // Option 1: Alternative Billing Only\n  await FlutterInappPurchase.instance.initConnection(\n    alternativeBillingModeAndroid:\n        AlternativeBillingModeAndroid.AlternativeOnly,\n  );\n\n  // Option 2: User Choice Billing\n  await FlutterInappPurchase.instance.initConnection(\n    alternativeBillingModeAndroid: AlternativeBillingModeAndroid.UserChoice,\n  );\n\n  // Option 3: None (default Google Play only)\n  await FlutterInappPurchase.instance.initConnection(\n    alternativeBillingModeAndroid: AlternativeBillingModeAndroid.None,\n  );\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Validation"}),": Always validate purchases on your backend server"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Clear Communication"}),": Inform users they're leaving the app for external payment"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Linking"}),": Implement deep links to return users to your app (iOS)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Error Handling"}),": Handle all error cases gracefully"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ios-specific",children:"iOS Specific"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS Version Check"}),": Verify iOS 16.0+ before enabling alternative billing"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"URL Validation"}),": Ensure external URLs are valid and secure (HTTPS)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No Purchase Events"}),": Don't rely on purchase streams when using external URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deep Link Implementation"}),": Crucial for returning users to your app"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-specific",children:"Android Specific"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"24-Hour Reporting"}),": Report tokens to Google within 24 hours"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Mode Selection"}),": Choose the appropriate mode for your use case"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"User Experience"}),": User Choice mode provides better UX but shares revenue with Google"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Backend Integration"}),": Implement proper token reporting to Google Play"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Test on real devices running iOS 16.0+"}),"\n",(0,l.jsx)(n.li,{children:"Verify external URL opens correctly in Safari"}),"\n",(0,l.jsx)(n.li,{children:"Test deep link return flow"}),"\n",(0,l.jsx)(n.li,{children:"Ensure StoreKit is configured for alternative billing"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Configure alternative billing in Google Play Console"}),"\n",(0,l.jsx)(n.li,{children:"Test both billing modes separately"}),"\n",(0,l.jsx)(n.li,{children:"Verify token generation and reporting"}),"\n",(0,l.jsx)(n.li,{children:"Test user choice dialog behavior"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"ios-issues",children:"iOS Issues"}),"\n",(0,l.jsx)(n.h4,{id:"feature-not-supported",children:'"Feature not supported"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ensure iOS 16.0 or later"}),"\n",(0,l.jsx)(n.li,{children:"Verify external purchase entitlement is approved"}),"\n",(0,l.jsx)(n.li,{children:"Check Info.plist configuration"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"external-url-not-opening",children:'"External URL not opening"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Check URL format (must be valid HTTPS)"}),"\n",(0,l.jsxs)(n.li,{children:["Verify ",(0,l.jsx)(n.code,{children:"useAlternativeBilling"})," flag is set"]}),"\n",(0,l.jsx)(n.li,{children:"Ensure SKExternalPurchase countries are configured"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"user-stuck-on-external-site",children:'"User stuck on external site"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement deep linking to return to app"}),"\n",(0,l.jsx)(n.li,{children:"Test deep link handling"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"android-issues",children:"Android Issues"}),"\n",(0,l.jsx)(n.h4,{id:"alternative-billing-not-available",children:'"Alternative billing not available"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify Google Play approval"}),"\n",(0,l.jsx)(n.li,{children:"Check device and Play Store version"}),"\n",(0,l.jsx)(n.li,{children:"Ensure billing mode is configured correctly"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"token-creation-failed",children:'"Token creation failed"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Verify product ID is correct"}),"\n",(0,l.jsx)(n.li,{children:"Check billing mode configuration"}),"\n",(0,l.jsx)(n.li,{children:"Ensure user completed info dialog"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"user-choice-dialog-not-showing",children:'"User choice dialog not showing"'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Verify ",(0,l.jsx)(n.code,{children:"alternativeBillingModeAndroid: UserChoice"})]}),"\n",(0,l.jsxs)(n.li,{children:["Ensure ",(0,l.jsx)(n.code,{children:"useAlternativeBilling: true"})," in request"]}),"\n",(0,l.jsx)(n.li,{children:"Check Google Play configuration"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"platform-requirements",children:"Platform Requirements"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"iOS"}),": iOS 16.0+ for external purchase URLs, iOS 18.2+ for dynamic URLs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Android"}),": Google Play Billing Library 5.0+ with alternative billing enabled"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Approval"}),": Both platforms require approval for alternative billing features"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.openiap.dev/docs/apis#alternative-billing",children:"OpenIAP Alternative Billing Specification"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/docs/examples/alternative-billing",children:"Alternative Billing Example"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/docs/guides/error-handling",children:"Error Handling"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const l={},t=r.createContext(l);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);