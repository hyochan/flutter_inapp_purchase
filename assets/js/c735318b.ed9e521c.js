"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[8715],{571:(e,n,i)=>{i.d(n,{A:()=>a});var t=i(6540),r=i(4848);function l({className:e="adfit",style:n,unit:i,height:l,width:a}){return(0,t.useEffect)(()=>{const n=setTimeout(()=>{const n=document.querySelector(`.${e}`);if(!n)return void console.warn(`AdFit: Element with class "${e}" not found`);const t=n.querySelectorAll(".kakao_ad_area"),r=n.querySelectorAll('script[src*="kas/static/ba.min.js"]');t.forEach(e=>e.remove()),r.forEach(e=>e.remove());const s=document.createElement("ins"),o=document.createElement("script");s.className="kakao_ad_area",s.style.cssText="display:none; width:100%;",o.async=!0,o.type="text/javascript",o.src="//t1.daumcdn.net/kas/static/ba.min.js",s.setAttribute("data-ad-width",a.toString()),s.setAttribute("data-ad-height",l.toString()),s.setAttribute("data-ad-unit",i),n.appendChild(s),n.appendChild(o)},100);return()=>clearTimeout(n)},[e,i,l,a]),(0,r.jsx)("div",{style:n,children:(0,r.jsx)("div",{className:e})})}function a(){return(0,r.jsx)(l,{unit:"DAN-YTmjDwlbcP42HBg6",height:100,width:320,className:"adfit-top",style:{flex:1,marginTop:24,marginBottom:24}})}},661:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/alternative-billing","title":"Alternative Billing Example","description":"Use alternative billing to redirect users to external payment systems or offer payment choices alongside platform billing.","source":"@site/versioned_docs/version-7.0/examples/alternative-billing.md","sourceDirName":"examples","slug":"/examples/alternative-billing","permalink":"/flutter_inapp_purchase/docs/7.0/examples/alternative-billing","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-7.0/examples/alternative-billing.md","tags":[],"version":"7.0","sidebarPosition":5,"frontMatter":{"title":"Alternative Billing Example","sidebar_label":"Alternative Billing","sidebar_position":5}}');var r=i(4848),l=i(8453),a=i(571);const s={title:"Alternative Billing Example",sidebar_label:"Alternative Billing",sidebar_position:5},o="Alternative Billing",c={},d=[{value:"iOS - External Purchase URL",id:"ios---external-purchase-url",level:2},{value:"iOS Custom URL (iOS 18.2+)",id:"ios-custom-url-ios-182",level:3},{value:"Important Notes",id:"important-notes",level:3},{value:"Android - Alternative Billing Only",id:"android---alternative-billing-only",level:2},{value:"Flow Steps",id:"flow-steps",level:3},{value:"Android - User Choice Billing",id:"android---user-choice-billing",level:2},{value:"Selection Dialog",id:"selection-dialog",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Initialize with Alternative Billing Mode",id:"initialize-with-alternative-billing-mode",level:3},{value:"Testing",id:"testing",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"alternative-billing",children:"Alternative Billing"})}),"\n",(0,r.jsx)(a.A,{}),"\n",(0,r.jsx)(n.p,{children:"Use alternative billing to redirect users to external payment systems or offer payment choices alongside platform billing."}),"\n",(0,r.jsx)(n.p,{children:"View the full example source:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["GitHub: ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/flutter_inapp_purchase/blob/main/example/lib/src/screens/alternative_billing_screen.dart",children:"alternative_billing_screen.dart"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ios---external-purchase-url",children:"iOS - External Purchase URL"}),"\n",(0,r.jsx)(n.p,{children:"Redirect users to an external website for payment (iOS 16.0+):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass IOSAlternativeBilling extends StatelessWidget {\n  final Product product;\n\n  const IOSAlternativeBilling({required this.product});\n\n  Future<void> _handlePurchase(BuildContext context) async {\n    if (!Platform.isIOS) return;\n\n    try {\n      await FlutterInappPurchase.instance.requestPurchase(\n        RequestPurchaseProps.inApp((\n          ios: RequestPurchaseIosProps(\n            sku: product.id,\n            quantity: 1,\n          ),\n          useAlternativeBilling: true,\n        )),\n      );\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text(\n            'Complete purchase on the external website. '\n            'You will be redirected back to the app.',\n          ),\n        ),\n      );\n    } catch (e) {\n      if (e is PurchaseError && e.code != ErrorCode.UserCancelled) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error: ${e.message}')),\n        );\n      }\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () => _handlePurchase(context),\n      child: Text('Buy (External URL)'),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ios-custom-url-ios-182",children:"iOS Custom URL (iOS 18.2+)"}),"\n",(0,r.jsx)(n.p,{children:"For dynamic URLs or runtime configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass IOSCustomUrlPurchase extends StatelessWidget {\n  final String externalUrl;\n\n  const IOSCustomUrlPurchase({\n    required this.externalUrl,\n  });\n\n  Future<void> _handlePurchase(BuildContext context) async {\n    if (!Platform.isIOS) return;\n\n    try {\n      final result = await FlutterInappPurchase.instance\n          .presentExternalPurchaseLinkIOS(externalUrl);\n\n      if (result.error != null) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Error: ${result.error}')),\n        );\n      } else if (result.success) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text(\n              'User redirected to external website. '\n              'Complete purchase there.',\n            ),\n          ),\n        );\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Error: $e')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () => _handlePurchase(context),\n      child: Text('Buy (Custom URL)'),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS 16.0+ Required"}),": External URLs only work on iOS 16.0 and later"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS 18.2+ for Custom URLs"}),": ",(0,r.jsx)(n.code,{children:"presentExternalPurchaseLinkIOS"})," requires iOS 18.2+"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Required"}),": External URLs must be configured in Info.plist (see ",(0,r.jsx)(n.a,{href:"/docs/guides/alternative-billing",children:"Alternative Billing Guide"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Callback"}),": Purchase streams will NOT emit when using external URLs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Linking"}),": Implement deep linking to return users to your app"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"android---alternative-billing-only",children:"Android - Alternative Billing Only"}),"\n",(0,r.jsx)(n.p,{children:"Manual 3-step flow for alternative billing only:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass AndroidAlternativeBillingOnly extends StatelessWidget {\n  final Product product;\n\n  const AndroidAlternativeBillingOnly({required this.product});\n\n  Future<void> _handlePurchase(BuildContext context) async {\n    if (!Platform.isAndroid) return;\n\n    try {\n      // Step 1: Check availability\n      final isAvailable = await FlutterInappPurchase.instance\n          .checkAlternativeBillingAvailabilityAndroid();\n\n      if (!isAvailable) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Alternative billing not available')),\n        );\n        return;\n      }\n\n      // Step 2: Show information dialog\n      final userAccepted = await FlutterInappPurchase.instance\n          .showAlternativeBillingDialogAndroid();\n\n      if (!userAccepted) {\n        print('User declined');\n        return;\n      }\n\n      // Step 2.5: Process payment with your payment system\n      // ... your payment processing logic here ...\n      print('Processing payment...');\n\n      // Step 3: Create reporting token (after successful payment)\n      final token = await FlutterInappPurchase.instance\n          .createAlternativeBillingTokenAndroid();\n\n      if (token != null) {\n        print('Token created: $token');\n\n        // Step 4: Report token to Google Play backend within 24 hours\n        // await reportToGoogleBackend(token);\n\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Alternative billing completed (DEMO)'),\n          ),\n        );\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Error: $e')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () => _handlePurchase(context),\n      child: Text('Buy (Alternative Only)'),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"flow-steps",children:"Flow Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check availability"})," - Verify alternative billing is enabled"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Show info dialog"})," - Display Google's information dialog"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Process payment"})," - Handle payment with your system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create token"})," - Generate reporting token"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Report to Google"})," - Send token to Google within 24 hours"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"android---user-choice-billing",children:"Android - User Choice Billing"}),"\n",(0,r.jsx)(n.p,{children:"Let users choose between Google Play and alternative billing:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass AndroidUserChoiceBilling extends StatefulWidget {\n  @override\n  _AndroidUserChoiceBillingState createState() =>\n      _AndroidUserChoiceBillingState();\n}\n\nclass _AndroidUserChoiceBillingState extends State<AndroidUserChoiceBilling> {\n  StreamSubscription? _purchaseSubscription;\n  StreamSubscription? _userChoiceSubscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _initConnection();\n  }\n\n  @override\n  void dispose() {\n    _purchaseSubscription?.cancel();\n    _userChoiceSubscription?.cancel();\n    super.dispose();\n  }\n\n  Future<void> _initConnection() async {\n    await FlutterInappPurchase.instance.initialize();\n\n    if (Platform.isAndroid) {\n      await FlutterInappPurchase.instance.initConnection(\n        alternativeBillingModeAndroid:\n            AlternativeBillingModeAndroid.UserChoice,\n      );\n    }\n\n    // Listen for Google Play purchases\n    _purchaseSubscription =\n        FlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\n      print('Google Play purchase: ${purchase.productId}');\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Purchase via Google Play successful')),\n      );\n    });\n\n    // Listen for alternative billing choices\n    _userChoiceSubscription =\n        FlutterInappPurchase.instance.userChoiceBillingAndroid.listen((details) {\n      print('User selected alternative billing');\n      print('Products: ${details.products}');\n      print('Token: ${details.externalTransactionToken}');\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text(\n            'User selected alternative billing. '\n            'Process payment with your system.',\n          ),\n        ),\n      );\n    });\n  }\n\n  Future<void> _handlePurchase(Product product) async {\n    if (!Platform.isAndroid) return;\n\n    try {\n      // Google will show selection dialog automatically\n      await FlutterInappPurchase.instance.requestPurchase(\n        RequestPurchaseProps.inApp((\n          android: RequestPurchaseAndroidProps(skus: [product.id]),\n          useAlternativeBilling: true,\n        )),\n      );\n\n      // If user selects Google Play: purchaseUpdated stream\n      // If user selects alternative: userChoiceBillingAndroid stream\n    } catch (e) {\n      print('Purchase error: $e');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () => _handlePurchase(/* your product */),\n      child: Text('Buy (User Choice)'),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"selection-dialog",children:"Selection Dialog"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Google shows automatic selection dialog"}),"\n",(0,r.jsx)(n.li,{children:"User chooses: Google Play (30% fee) or Alternative (lower fee)"}),"\n",(0,r.jsx)(n.li,{children:"Different callbacks based on user choice"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"initialize-with-alternative-billing-mode",children:"Initialize with Alternative Billing Mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:io';\n\nFuture<void> initializeWithAlternativeBilling() async {\n  await FlutterInappPurchase.instance.initialize();\n\n  if (Platform.isAndroid) {\n    await FlutterInappPurchase.instance.initConnection(\n      alternativeBillingModeAndroid:\n          AlternativeBillingModeAndroid.AlternativeOnly, // or UserChoice\n    );\n  } else {\n    await FlutterInappPurchase.instance.initConnection();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test on iOS 16.0+ devices"}),"\n",(0,r.jsx)(n.li,{children:"Verify external URL opens in Safari"}),"\n",(0,r.jsx)(n.li,{children:"Test deep link return flow"}),"\n",(0,r.jsx)(n.li,{children:"Ensure Info.plist is configured"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Configure alternative billing in Google Play Console"}),"\n",(0,r.jsx)(n.li,{children:"Test both modes separately"}),"\n",(0,r.jsx)(n.li,{children:"Verify token generation"}),"\n",(0,r.jsx)(n.li,{children:"Test user choice dialog"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend Validation"})," - Always validate on server"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear UI"})," - Show users they're leaving the app"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"})," - Handle all error cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Token Reporting"})," - Report within 24 hours (Android)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deep Linking"})," - Essential for iOS return flow"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/guides/alternative-billing",children:"Alternative Billing Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/guides/error-handling",children:"Error Handling"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/docs/examples/purchase-flow",children:"Purchase Flow"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);