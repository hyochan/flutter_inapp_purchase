"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6156],{2732:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"horizon-os-support","metadata":{"permalink":"/flutter_inapp_purchase/blog/horizon-os-support","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-10-28-horizon-os-support.md","source":"@site/blog/2025-10-28-horizon-os-support.md","title":"7.1.13 - Horizon OS Support for Meta Quest Devices","description":"Horizon OS Support","date":"2025-10-28T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"},{"inline":true,"label":"horizon-os","permalink":"/flutter_inapp_purchase/blog/tags/horizon-os"},{"inline":true,"label":"meta-quest","permalink":"/flutter_inapp_purchase/blog/tags/meta-quest"},{"inline":false,"label":"OpenIAP","permalink":"/flutter_inapp_purchase/blog/tags/openiap","description":"OpenIAP ecosystem updates"}],"readingTime":4.01,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"horizon-os-support","title":"7.1.13 - Horizon OS Support for Meta Quest Devices","authors":["hyochan"],"tags":["release","flutter","in-app-purchase","horizon-os","meta-quest","openiap"],"date":"2025-10-28T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Release 7.1.0 - Simplified API with Direct List Returns","permalink":"/flutter_inapp_purchase/blog/7.1.0-release"}},"content":"![Horizon OS Support](/img/horizon.png)\\n\\nFlutter In-App Purchase now supports Meta Quest devices with Horizon OS billing, enabling seamless in-app purchases in VR applications using Meta\'s Platform SDK.\\n\\n[View the release on GitHub \u2192](https://github.com/hyochan/flutter_inapp_purchase/releases/tag/7.1.13)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Feature Highlights\\n\\nWith Horizon OS support, you can now:\\n\\n- Build VR apps for Meta Quest devices (Quest 2, Quest 3, Quest Pro) with in-app purchases\\n- Use the same Flutter In-App Purchase API for both Google Play and Meta Horizon stores\\n- Switch between billing platforms with a simple configuration flag\\n- Distribute apps on both Google Play Store and Meta Horizon Store from a single codebase\\n\\n## What is Horizon OS?\\n\\nHorizon OS is Meta\'s operating system for Quest VR devices. With this update, flutter_inapp_purchase now supports Meta\'s Platform SDK for billing, allowing developers to monetize their VR applications on the Meta Horizon Store.\\n\\n## How It Works\\n\\nThe implementation uses OpenIAP\'s `openiap-google-horizon` wrapper, which provides a unified interface for both Google Play Billing and Meta\'s Platform SDK. Your existing code remains unchanged - the platform selection happens at build time through product flavors.\\n\\n## Configuration\\n\\n### Enable Horizon Mode\\n\\nAdd to your `android/gradle.properties`:\\n\\n```properties\\n# Enable Horizon OS billing\\nhorizonEnabled=true\\n```\\n\\n### Configure Horizon App ID\\n\\nAdd your Meta Horizon App ID in `android/local.properties`:\\n\\n```properties\\nHORIZON_APP_ID=your_horizon_app_id_here\\n```\\n\\n### Update AndroidManifest.xml\\n\\nAdd the metadata in your `android/app/src/main/AndroidManifest.xml`:\\n\\n```xml\\n<application>\\n    \x3c!-- Meta Horizon App ID - injected by Gradle --\x3e\\n    <meta-data\\n        android:name=\\"com.meta.horizon.platform.ovr.HORIZON_APP_ID\\"\\n        android:value=\\"${HORIZON_APP_ID}\\" />\\n</application>\\n```\\n\\n## Getting Started\\n\\n### Installation\\n\\n```bash\\nflutter pub add flutter_inapp_purchase\\n```\\n\\nOr add to your `pubspec.yaml`:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^7.1.13\\n```\\n\\n### Build Commands\\n\\n```bash\\n# Build for Google Play Store\\nflutter build apk --flavor play\\n\\n# Build for Meta Horizon Store\\nflutter build apk --flavor horizon\\n\\n# Run on Quest device\\nflutter run --flavor horizon -d Quest\\n```\\n\\n### Code Usage\\n\\nNo code changes required! The API remains identical across platforms.\\n\\nThe implementation automatically detects the `horizonEnabled` flag and uses:\\n\\n- **Google Play Billing** when `horizonEnabled=false` (default)\\n- **Meta Platform SDK** when `horizonEnabled=true`\\n\\n## Under the Hood\\n\\n### Dependency Management\\n\\nThe plugin uses conditional dependencies in `android/build.gradle`:\\n\\n```gradle\\ndependencies {\\n    // Play flavor - Google Play Billing\\n    add(\\"playImplementation\\", \\"io.github.hyochan.openiap:openiap-google:version\\")\\n\\n    // Horizon flavor - Meta Platform SDK\\n    add(\\"horizonImplementation\\", \\"io.github.hyochan.openiap:openiap-google-horizon:version\\")\\n}\\n```\\n\\n### Build System\\n\\nProduct flavors are configured in both the plugin and your app:\\n\\n**Plugin** (`flutter_inapp_purchase/android/build.gradle`):\\n\\n```gradle\\nandroid {\\n    flavorDimensions \\"platform\\"\\n    productFlavors {\\n        play { dimension \\"platform\\"; isDefault = true }\\n        horizon { dimension \\"platform\\" }\\n    }\\n}\\n```\\n\\n**Your App** (`android/app/build.gradle`):\\n\\n```gradle\\nandroid {\\n    flavorDimensions \\"platform\\"\\n    productFlavors {\\n        play { /* configuration */ }\\n        horizon { /* configuration */ }\\n    }\\n}\\n```\\n\\n## Backward Compatibility\\n\\nThis update is **100% backward compatible**:\\n\\n- Existing apps using Google Play Billing continue to work without changes\\n- The default behavior remains Google Play Billing (`horizonEnabled=false` by default)\\n- Horizon support is opt-in through simple configuration flag\\n- No API changes or breaking changes\\n- No product flavors required in your app\\n\\n## Testing on Meta Quest\\n\\n### Prerequisites\\n\\n1. [Meta Quest Developer Account](https://developer.oculus.com/)\\n2. Quest device with Developer Mode enabled\\n3. Test products configured in [Meta Quest Developer Dashboard](https://developer.oculus.com/manage/)\\n\\n### Steps\\n\\n1. Enable Developer Mode on your Quest device\\n2. Connect via ADB: `adb devices`\\n3. Configure test products in Meta Quest Developer Dashboard\\n4. Enable Horizon mode in `android/gradle.properties`: `horizonEnabled=true`\\n5. Run on Quest: `flutter run -d Quest`\\n\\n## Example App\\n\\nCheck out the updated example app which demonstrates:\\n\\n- Simple configuration with `horizonEnabled` flag\\n- No product flavors required\\n- Identical API usage across platforms\\n- Easy platform switching\\n\\n```bash\\n# Clone the repository\\ngit clone https://github.com/hyochan/flutter_inapp_purchase.git\\ncd flutter_inapp_purchase/example\\n\\n# For Google Play (default)\\nflutter run\\n\\n# For Meta Quest\\necho \\"horizonEnabled=true\\" >> android/gradle.properties\\necho \\"HORIZON_APP_ID=your_app_id\\" >> android/local.properties\\nflutter run -d Quest\\n```\\n\\n## Platform Support Comparison\\n\\n| Feature               | Google Play | Meta Horizon |\\n| --------------------- | ----------- | ------------ |\\n| One-time purchases    | \u2705          | \u2705           |\\n| Consumables           | \u2705          | \u2705           |\\n| Subscriptions         | \u2705          | \u2705           |\\n| Purchase verification | \u2705          | \u2705           |\\n| Purchase restoration  | \u2705          | \u2705           |\\n| Subscription offers   | \u2705          | \u2705           |\\n| Promo codes           | \u2705          | \u2705           |\\n| Alternative billing   | \u2705          | N/A          |\\n| Deferred payments     | \u2705          | \u274c           |\\n\\n## Documentation\\n\\nComplete documentation for Horizon OS setup:\\n\\n- [Horizon OS Setup Guide](https://www.openiap.dev/docs/horizon-setup) - Complete setup instructions\\n- [Quick Start](https://hyochan.github.io/flutter_inapp_purchase/docs/getting-started/quickstart) - Getting started guide\\n- [Purchases Guide](https://hyochan.github.io/flutter_inapp_purchase/docs/guides/purchases) - Purchase implementation\\n\\n## OpenIAP Ecosystem\\n\\nThis feature is powered by the OpenIAP ecosystem:\\n\\n- [openiap-google-horizon](https://central.sonatype.com/artifact/io.github.hyochan.openiap/openiap-google-horizon) - Horizon billing wrapper\\n- [OpenIAP Specification](https://openiap.dev) - Unified IAP specification\\n- Cross-platform support: Flutter, React Native, Expo\\n\\nThe Horizon implementation follows the same OpenIAP specification used across all platforms, ensuring consistent behavior and developer experience.\\n\\n## What\'s Next?\\n\\nWe continue to expand platform support and improve developer experience:\\n\\n- Enhanced testing tools for VR development\\n- Better error messages for Horizon-specific issues\\n- Additional documentation and examples\\n- Performance optimizations\\n\\n## Feedback\\n\\nTry out Horizon OS support and let us know your feedback! If you encounter any issues or have suggestions:\\n\\n- [GitHub Issues](https://github.com/hyochan/flutter_inapp_purchase/issues) - Report bugs\\n- [OpenIAP Discussions](https://github.com/hyodotdev/openiap/discussions) - Spec discussions\\n\\nBuild amazing VR experiences with seamless in-app purchases on Meta Quest!\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^7.1.13\\n```"},{"id":"7.1.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/7.1.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-10-07-7.1.0.release.md","source":"@site/blog/2025-10-07-7.1.0.release.md","title":"Release 7.1.0 - Simplified API with Direct List Returns","description":"Release 7.1.0 simplifies the fetchProducts() API by returning lists directly instead of union types, making it easier to work with products while maintaining type safety through explicit type annotations.","date":"2025-10-07T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"},{"inline":false,"label":"Breaking Change","permalink":"/flutter_inapp_purchase/blog/tags/breaking-change","description":"Breaking changes and migration guides"},{"inline":true,"label":"type-inference","permalink":"/flutter_inapp_purchase/blog/tags/type-inference"}],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"7.1.0-release","title":"Release 7.1.0 - Simplified API with Direct List Returns","authors":["hyochan"],"tags":["release","flutter","in-app-purchase","breaking-change","type-inference"],"date":"2025-10-07T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"7.1.13 - Horizon OS Support for Meta Quest Devices","permalink":"/flutter_inapp_purchase/blog/horizon-os-support"},"nextItem":{"title":"Release 7.0.0 - OpenIAP GQL 1.0.10, Type Safety & Alternative Billing","permalink":"/flutter_inapp_purchase/blog/7.0.0-release"}},"content":"Release 7.1.0 simplifies the `fetchProducts()` API by returning lists directly instead of union types, making it easier to work with products while maintaining type safety through explicit type annotations.\\n\\n[View the release on GitHub \u2192](https://github.com/hyochan/flutter_inapp_purchase/releases/tag/7.1.0)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Highlights\\n\\n### Simplified fetchProducts API\\n\\nThe biggest change in 7.1 is the simplification of the `fetchProducts()` method. Instead of returning a `FetchProductsResult` union type that needs unwrapping, it now returns a list directly.\\n\\n**Before (7.0)**:\\n```dart\\nfinal result = await iap.fetchProducts(\\n  skus: [\'product_id\'],\\n  type: ProductQueryType.InApp,\\n);\\n\\nif (result is FetchProductsResultProducts) {\\n  final products = result.value ?? [];\\n  for (final product in products) {\\n    print(\'${product.title}: ${product.displayPrice}\');\\n  }\\n}\\n```\\n\\n**After (7.1)**:\\n```dart\\nfinal List<Product> products = await iap.fetchProducts(\\n  skus: [\'product_id\'],\\n  type: ProductQueryType.InApp,\\n);\\n\\nfor (final product in products) {\\n  print(\'${product.title}: ${product.displayPrice}\');\\n}\\n```\\n\\n### Key Benefits\\n\\n1. **Simpler API**: No more union type unwrapping with `.value` or checking `is FetchProductsResultProducts`\\n2. **Cleaner Code**: Direct iteration over products without intermediate steps\\n3. **Type Safety**: Explicit type annotations provide full IDE support and compile-time safety\\n4. **Better DX**: More intuitive API that\'s easier to learn and use\\n\\n### Type Annotations\\n\\nTo get proper type inference, use explicit type annotations on the variable:\\n\\n```dart\\n// In-app products\\nfinal List<Product> products = await iap.fetchProducts(\\n  skus: [\'coins_100\', \'remove_ads\'],\\n  type: ProductQueryType.InApp,\\n);\\n\\n// Subscriptions\\nfinal List<ProductSubscription> subscriptions = await iap.fetchProducts(\\n  skus: [\'premium_monthly\', \'premium_yearly\'],\\n  type: ProductQueryType.Subs,\\n);\\n\\n// All products (both in-app and subscriptions)\\nfinal List<ProductCommon> allProducts = await iap.fetchProducts(\\n  skus: [\'coins_100\', \'premium_monthly\'],\\n  type: ProductQueryType.All,\\n);\\n```\\n\\n### Migration from 7.0\\n\\nMigrating from 7.0 to 7.1 is straightforward:\\n\\n```dart\\n// 7.0: Unwrap union type\\nfinal result = await iap.fetchProducts(\\n  skus: productIds,\\n  type: ProductQueryType.InApp,\\n);\\nfinal products = result.value ?? [];\\n\\n// 7.1: Direct list with explicit type\\nfinal List<Product> products = await iap.fetchProducts(\\n  skus: productIds,\\n  type: ProductQueryType.InApp,\\n);\\n```\\n\\n## Breaking Changes\\n\\n### fetchProducts Return Type\\n\\n- **Before**: Returns `Future<FetchProductsResult>` (union type)\\n- **After**: Returns `Future<List<dynamic>>` (requires explicit type annotation)\\n\\n### Required Changes\\n\\n1. Add explicit type annotation to variable declarations\\n2. Remove `.value` or `.products` getter calls\\n3. Remove union type checks (`is FetchProductsResultProducts`)\\n\\n## Full Example\\n\\nHere\'s a complete example showing the new API:\\n\\n```dart\\nimport \'package:flutter_inapp_purchase/flutter_inapp_purchase.dart\';\\n\\nclass ProductStore {\\n  final _iap = FlutterInappPurchase.instance;\\n\\n  Future<void> loadProducts() async {\\n    // Initialize connection\\n    await _iap.initConnection();\\n\\n    // Load in-app products\\n    final List<Product> inAppProducts = await _iap.fetchProducts(\\n      skus: [\'coins_100\', \'coins_500\', \'remove_ads\'],\\n      type: ProductQueryType.InApp,\\n    );\\n\\n    // Load subscriptions\\n    final List<ProductSubscription> subscriptions = await _iap.fetchProducts(\\n      skus: [\'premium_monthly\', \'premium_yearly\'],\\n      type: ProductQueryType.Subs,\\n    );\\n\\n    // Use products directly\\n    for (final product in inAppProducts) {\\n      print(\'${product.id}: ${product.displayPrice}\');\\n    }\\n\\n    for (final sub in subscriptions) {\\n      print(\'${sub.id}: ${sub.displayPrice}\');\\n    }\\n  }\\n}\\n```\\n\\n## Why This Change?\\n\\nThe previous union type approach (introduced in 7.0) provided strong type safety but added unnecessary complexity for most use cases. User feedback ([#576](https://github.com/hyochan/flutter_inapp_purchase/issues/576)) showed that:\\n\\n1. The union type unwrapping felt verbose and boilerplate-heavy\\n2. Type inference didn\'t work as expected with `for-in` loops\\n3. The API was harder to learn for new users\\n\\nVersion 7.1 strikes a better balance by:\\n- Keeping type safety through explicit annotations\\n- Simplifying the common case (direct iteration)\\n- Reducing boilerplate code\\n- Maintaining full compatibility with the OpenIAP specification\\n\\n## Documentation\\n\\nAll documentation has been updated to reflect the new API:\\n- [fetchProducts API Reference](https://hyochan.github.io/flutter_inapp_purchase/docs/api/methods/get-products)\\n- [Quick Start Guide](https://hyochan.github.io/flutter_inapp_purchase/docs/getting-started/quickstart)\\n- [Migration Guide from 7.0](https://hyochan.github.io/flutter_inapp_purchase/docs/migration/from-v7.0)\\n\\nVersion 7.0 documentation is still available in the [version dropdown](https://hyochan.github.io/flutter_inapp_purchase/docs).\\n\\n## Credits\\n\\nSpecial thanks to [@matifdeveloper](https://github.com/matifdeveloper) for reporting the type inference issue in [#576](https://github.com/hyochan/flutter_inapp_purchase/issues/576).\\n\\n## What\'s Next?\\n\\nWe continue to focus on:\\n- OpenIAP specification compliance\\n- Better developer experience\\n- Comprehensive documentation\\n- Community feedback and improvements\\n\\nTry out 7.1.0 and let us know your feedback!\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^7.1.0\\n```"},{"id":"7.0.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/7.0.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-10-04-7.0.0.release.md","source":"@site/blog/2025-10-04-7.0.0.release.md","title":"Release 7.0.0 - OpenIAP GQL 1.0.10, Type Safety & Alternative Billing","description":"Release 7.0.0 migrates to OpenIAP GQL 1.0.10, introducing union types, platform-specific classes, enhanced type safety, and comprehensive alternative billing support for both iOS and Android platforms.","date":"2025-10-04T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"OpenIAP","permalink":"/flutter_inapp_purchase/blog/tags/openiap","description":"OpenIAP ecosystem updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"},{"inline":false,"label":"Breaking Change","permalink":"/flutter_inapp_purchase/blog/tags/breaking-change","description":"Breaking changes and migration guides"},{"inline":false,"label":"Alternative Billing","permalink":"/flutter_inapp_purchase/blog/tags/alternative-billing","description":"Alternative billing and external payment features"}],"readingTime":5.03,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"7.0.0-release","title":"Release 7.0.0 - OpenIAP GQL 1.0.10, Type Safety & Alternative Billing","authors":["hyochan"],"tags":["release","openiap","flutter","in-app-purchase","breaking-change","alternative-billing"],"date":"2025-10-04T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 7.1.0 - Simplified API with Direct List Returns","permalink":"/flutter_inapp_purchase/blog/7.1.0-release"},"nextItem":{"title":"Release 6.8.0 - Full OpenIAP Ecosystem Adoption","permalink":"/flutter_inapp_purchase/blog/6.8.0-release"}},"content":"Release 7.0.0 migrates to OpenIAP GQL 1.0.10, introducing union types, platform-specific classes, enhanced type safety, and comprehensive alternative billing support for both iOS and Android platforms.\\n\\n[View the release on GitHub \u2192](https://github.com/hyochan/flutter_inapp_purchase/releases/tag/7.0.0)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Highlights\\n\\n### Migration to OpenIAP GQL 1.0.10\\n\\nThe biggest change in 7.0 is the migration to OpenIAP GQL 1.0.10, bringing a new type system that better represents platform-specific IAP features:\\n\\n```dart\\n// Union types for Products\\nfinal result = await iap.fetchProducts(\\n  skus: [\'product_id\'],\\n  type: ProductQueryType.InApp,\\n);\\n\\nif (result is FetchProductsResultProducts) {\\n  for (final product in result.value ?? []) {\\n    if (product is ProductIOS) {\\n      debugPrint(\'iOS Product: ${product.displayName}\');\\n    } else if (product is ProductAndroid) {\\n      debugPrint(\'Android Product: ${product.title}\');\\n    }\\n  }\\n}\\n```\\n\\nThis provides:\\n\\n- **Better type safety**: Platform-specific properties are type-safe\\n- **Clearer intent**: Code explicitly handles platform differences\\n- **IDE support**: Better autocomplete and type hints\\n- **Runtime safety**: Union types prevent accessing wrong platform properties\\n\\n### Platform-Specific Product Types\\n\\nProducts now use a union type system:\\n\\n```dart\\n// In-app products\\nProductIOS | ProductAndroid\\n\\n// Subscription products\\nProductSubscriptionIOS | ProductSubscriptionAndroid\\n\\n// Purchases\\nPurchaseIOS | PurchaseAndroid\\n```\\n\\nEach platform has its own specific properties:\\n\\n```dart\\nif (product is ProductSubscriptionIOS) {\\n  // iOS-specific properties\\n  final offers = product.subscriptionOffers;\\n  final groupId = product.subscriptionGroupIdIOS;\\n} else if (product is ProductSubscriptionAndroid) {\\n  // Android-specific properties\\n  final offers = product.subscriptionOffers;\\n  final basePlanId = product.basePlanIdAndroid;\\n}\\n```\\n\\n### Non-Nullable Event Streams\\n\\nEvent streams are now non-nullable for better null safety:\\n\\n```dart\\n// Before (v6.x)\\nStream<Purchase?> get purchaseUpdated\\nStream<PurchaseResult?> get purchaseError\\n\\n// After (v7.0)\\nStream<Purchase> get purchaseUpdatedListener\\nStream<PurchaseError> get purchaseErrorListener\\n```\\n\\nBenefits:\\n\\n- **No null checks**: Guaranteed to receive valid events\\n- **Clearer naming**: `Listener` suffix indicates event stream\\n- **Type safety**: Removes unnecessary optional handling\\n\\n### Alternative Billing Support\\n\\nAdded comprehensive support for alternative billing on both platforms:\\n\\n#### iOS Alternative Billing (StoreKit External Purchase)\\n\\nThree new APIs for managing external purchases on iOS:\\n\\n- **`canPresentExternalPurchaseNoticeIOS()`** - Check if the notice sheet is available (iOS 18.2+)\\n- **`presentExternalPurchaseNoticeSheetIOS()`** - Present a notice before redirecting to external purchase (iOS 18.2+)\\n- **`presentExternalPurchaseLinkIOS(url)`** - Open external purchase link in Safari (iOS 16.0+)\\n\\nConfigure your iOS app by adding entitlements and Info.plist keys:\\n\\n```xml\\n\x3c!-- ios/Runner/Runner.entitlements --\x3e\\n<key>com.apple.developer.storekit.external-purchase</key>\\n<true/>\\n<key>com.apple.developer.storekit.external-purchase-link</key>\\n<true/>\\n```\\n\\n```xml\\n\x3c!-- ios/Runner/Info.plist --\x3e\\n<key>SKExternalPurchase</key>\\n<array>\\n    <string>kr</string>\\n    <string>nl</string>\\n    <string>de</string>\\n</array>\\n\\n<key>SKExternalPurchaseLink</key>\\n<dict>\\n    <key>kr</key>\\n    <string>https://your-site.com/kr/checkout</string>\\n</dict>\\n```\\n\\n#### Android Alternative Billing\\n\\nThree new APIs for Google Play Alternative Billing flow:\\n\\n- **`checkAlternativeBillingAvailabilityAndroid()`** - Check if alternative billing is available\\n- **`showAlternativeBillingDialogAndroid()`** - Show Google\'s required information dialog\\n- **`createAlternativeBillingTokenAndroid()`** - Generate reporting token after payment\\n\\nInitialize with alternative billing mode:\\n\\n```dart\\nawait iap.initConnection(\\n  alternativeBillingModeAndroid: AlternativeBillingModeAndroid.UserChoice,\\n);\\n```\\n\\nAvailable modes:\\n\\n- `None` - Standard Google Play billing only (default)\\n- `UserChoice` - User can choose between Google Play or alternative billing\\n- `AlternativeOnly` - Skip Google Play billing entirely\\n\\n#### User Choice Billing Event Listener\\n\\nNew event stream for Android User Choice Billing:\\n\\n```dart\\nFlutterInappPurchase.instance.userChoiceBillingAndroid.listen((details) {\\n  print(\'User selected alternative billing\');\\n  print(\'Products: ${details.products}\');\\n  print(\'Token: ${details.externalTransactionToken}\');\\n  // Process payment with your system and report token to Google\\n});\\n```\\n\\n### Android Replacement Modes\\n\\nSubscription upgrade/downgrade now uses replacement modes instead of proration modes:\\n\\n```dart\\nawait iap.requestPurchase(\\n  RequestPurchaseProps.subs((\\n    ios: RequestSubscriptionIosProps(sku: \'yearly_sub\'),\\n    android: RequestSubscriptionAndroidProps(\\n      skus: [\'yearly_sub\'],\\n      replacementModeAndroid: AndroidReplacementMode.withTimeProration,\\n    ),\\n    useAlternativeBilling: null,\\n  )),\\n);\\n```\\n\\nAvailable modes:\\n\\n- `withTimeProration` (1) - Credit unused time towards new subscription\\n- `chargeProratedPrice` (2) - Charge prorated price immediately\\n- `withoutProration` (3) - No credit for unused time\\n- `deferred` (4) - New subscription starts at next renewal\\n- `chargeFullPrice` (5) - Charge full price immediately\\n\\n## Breaking Changes\\n\\n### Removed Methods\\n\\nThe following deprecated iOS-specific methods have been removed:\\n\\n- `getAvailableItemsIOS()` \u2192 Use `getAvailablePurchases()` instead\\n- `getAppTransactionTypedIOS()` \u2192 Use `getAppTransactionIOS()` instead\\n- `getPurchaseHistoriesIOS()` \u2192 Use `getAvailablePurchases(onlyIncludeActiveItemsIOS: false)` instead\\n\\n### API Changes\\n\\n- **Event streams renamed**: `purchaseUpdated` \u2192 `purchaseUpdatedListener`, `purchaseError` \u2192 `purchaseErrorListener`\\n- **Union types required**: Handle `FetchProductsResultProducts | FetchProductsResultError` explicitly\\n- **Platform-specific types**: Products and Purchases are now platform-specific classes\\n- **Non-nullable streams**: Event streams no longer emit nullable values\\n\\n## Migration Guide\\n\\n### 1. Update Event Listeners\\n\\n```dart\\n// Before\\niap.purchaseUpdated.listen((purchase) {\\n  if (purchase != null) {\\n    handlePurchase(purchase);\\n  }\\n});\\n\\n// After\\niap.purchaseUpdatedListener.listen((purchase) {\\n  handlePurchase(purchase); // No null check needed\\n});\\n```\\n\\n### 2. Handle Union Types\\n\\n```dart\\n// Before\\nfinal products = await iap.fetchProducts(...);\\nfor (final product in products) {\\n  print(product.title);\\n}\\n\\n// After\\nfinal result = await iap.fetchProducts(...);\\nif (result is FetchProductsResultProducts) {\\n  for (final product in result.value ?? []) {\\n    if (product is ProductIOS) {\\n      print(product.displayName);\\n    } else if (product is ProductAndroid) {\\n      print(product.title);\\n    }\\n  }\\n}\\n```\\n\\n### 3. Update Replacement Modes\\n\\n```dart\\n// Before\\nRequestPurchaseAndroidProps(\\n  prorationModeAndroid: 1,\\n)\\n\\n// After\\nRequestPurchaseAndroidProps(\\n  replacementModeAndroid: AndroidReplacementMode.withTimeProration,\\n)\\n```\\n\\n### 4. Replace Removed Methods\\n\\n```dart\\n// Before\\nfinal items = await iap.getAvailableItemsIOS();\\n\\n// After\\nfinal items = await iap.getAvailablePurchases();\\n```\\n\\n## Benefits\\n\\n### Type Safety\\n\\nThe new union type system provides compile-time safety:\\n\\n- Platform-specific properties are type-safe\\n- No runtime errors from accessing wrong properties\\n- Better IDE autocomplete and warnings\\n\\n### OpenIAP Compliance\\n\\nAligns with OpenIAP specification across multiple platforms:\\n\\n- Expo IAP\\n- Flutter In-App Purchase\\n- Kotlin Multiplatform SDK\\n- React Native IAP (planned)\\n\\n### Better Developer Experience\\n\\n- **Clearer code**: Platform differences are explicit\\n- **Fewer bugs**: Type system catches errors at compile time\\n- **Better tooling**: IDEs provide accurate suggestions\\n- **Self-documenting**: Code intent is clear from types\\n\\n### Alternative Billing Flexibility\\n\\n- **iOS**: External purchase links, notice sheets, multi-link support\\n- **Android**: Alternative billing only, user choice billing, token reporting\\n- **Unified API**: Cross-platform support with platform-specific features\\n\\n## Platform Requirements\\n\\n### iOS Alternative Billing\\n\\n- **iOS 16.0+** for external purchase URLs\\n- **iOS 18.2+** for dynamic URLs and notice sheets\\n- **Approval Required**: Must obtain approval from Apple to use external purchase features\\n- **URL Requirements**: URLs must use HTTPS, have no query parameters, and be 1,000 characters or fewer\\n\\n### Android Alternative Billing\\n\\n- **Google Play Billing Library 5.0+** with alternative billing enabled\\n- **Approval Required**: Must be approved for alternative billing in Google Play Console\\n- **Token Reporting**: Must report tokens to Google within 24 hours\\n\\n## Resources\\n\\n- [API Documentation](/docs/api/overview)\\n- [Type Reference](/docs/api/types)\\n- [Migration Guide](/docs/migration/from-v6)\\n- [Alternative Billing Guide](/docs/guides/alternative-billing)\\n- [Alternative Billing Example](/docs/examples/alternative-billing)\\n- [Complete Examples](/docs/examples/purchase-flow)\\n- [GitHub Release](https://github.com/hyochan/flutter_inapp_purchase/releases/tag/7.0.0)\\n\\n## Acknowledgments\\n\\nThanks to all contributors and the OpenIAP community for feedback and testing. Special thanks to early adopters who helped identify issues during the RC phase and provided valuable feedback on the alternative billing implementation.\\n\\nReady to upgrade? Check out our updated [documentation](/docs/api/overview), [migration guide](/docs/migration/from-v6), and [examples](/docs/examples/purchase-flow)!"},{"id":"6.8.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.8.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-09-21-6.8.0.release.md","source":"@site/blog/2025-09-21-6.8.0.release.md","title":"Release 6.8.0 - Full OpenIAP Ecosystem Adoption","description":"Release 6.8.0 graduates flutterinapppurchase into the full OpenIAP ecosystem.","date":"2025-09-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"OpenIAP","permalink":"/flutter_inapp_purchase/blog/tags/openiap","description":"OpenIAP ecosystem updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":1.83,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.8.0-release","title":"Release 6.8.0 - Full OpenIAP Ecosystem Adoption","authors":["hyochan"],"tags":["release","openiap","flutter","in-app-purchase"],"date":"2025-09-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 7.0.0 - OpenIAP GQL 1.0.10, Type Safety & Alternative Billing","permalink":"/flutter_inapp_purchase/blog/7.0.0-release"},"nextItem":{"title":"Release 6.7.0","permalink":"/flutter_inapp_purchase/blog/6.7.0-release"}},"content":"Release 6.8.0 graduates flutter_inapp_purchase into the full OpenIAP ecosystem.\\nThe plugin now shares the same native stacks, type system, and tooling used by\\nExpo IAP and the Kotlin Multiplatform SDK, giving Flutter teams a predictable\\nupgrade path and richer diagnostics across both stores.\\n\\n[View the release on GitHub \u2192](https://github.com/hyochan/flutter_inapp_purchase/releases/tag/6.8.0)\\n\\n\x3c!-- truncate --\x3e\\n\\n## Highlights\\n\\n- Flutter In-App Purchase 6.8.0 graduates the project into the full **OpenIAP ecosystem**. The release ships with three dedicated native stacks:\\n\\n  - **[openiap-apple](https://github.com/hyodotdev/openiap-apple)** \u2014 StoreKit 2 implementation for Apple platforms\\n  - **[openiap-google](https://github.com/hyodotdev/openiap-google)** \u2014 Google Play Billing integration for Android\\n  - **[openiap-gql](https://github.com/hyodotdev/openiap-gql)** \u2014 GraphQL helpers that drive types and tooling\\n\\n  From 6.8.0 onward, Flutter In-App Purchase stays in lockstep with these modules: Apple v1.2.2, Google v1.2.6, and GQL v1.0.8. That shared version alignment gives Flutter apps stable native compatibility and a unified type system straight from the OpenIAP schema.\\n\\n## Tooling and workflow\\n\\n- Type generation, Podspecs, and Gradle builds all consume `openiap-versions.json`\\n  so dependency bumps require one edit.\\n\\n## Important changes\\n\\n- `getProducts`, `getSubscriptions`, and `getPurchaseHistories` are permanently\\n  removed. Use `fetchProducts(ProductRequest(...))` and\\n  `getAvailablePurchases([PurchaseOptions(...)])` instead.\\n- Purchase request helpers require explicit product types; passing the old\\n  \u201call\u201d value throws an error to prevent invalid store calls.\\n- Transaction identifiers surfaced by the stores remain untouched. For new\\n  server-side validation, rely on the unified `purchaseToken` exposed on every\\n  purchase record.\\n- **Transaction identifiers**: `transactionId` is reinstated as the primary store\\n  reference (`orderId` on Android, StoreKit transaction ID on iOS). Android\u2019s\\n  generic `id` is no longer repurposed for orders; when Google Play omits an\\n  `orderId` (typical for consumables), `transactionId` becomes `null` and clients\\n  should rely on the unified `purchaseToken` (Android purchase token / iOS JWS).\\n  This value is the canonical receipt for server validation. See the related\\n  [react-native-iap discussion](https://github.com/hyochan/react-native-iap/discussions/3016).\\n\\n## Installation\\n\\n```bash\\nflutter pub add flutter_inapp_purchase:^6.8.0\\n```\\n\\n## References\\n\\n- Closed pull requests for this cycle: [#558](https://github.com/hyochan/flutter_inapp_purchase/pull/558), [#559](https://github.com/hyochan/flutter_inapp_purchase/pull/559), [#560](https://github.com/hyochan/flutter_inapp_purchase/pull/560)\\n- Supporting commit: [e92614ede2988c93ea3c750394154a7a31899e7d](https://github.com/hyochan/flutter_inapp_purchase/commit/e92614ede2988c93ea3c750394154a7a31899e7d)\\n- Learn more about the shared ecosystem: [openiap.dev](https://www.openiap.dev/)"},{"id":"6.7.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.7.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-09-17-6.7.0.release.md","source":"@site/blog/2025-09-17-6.7.0.release.md","title":"Release 6.7.0","description":"We\u2019ve shipped 6.7.0 with a fully consolidated OpenIAP stack and a key Android","date":"2025-09-17T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"OpenIAP","permalink":"/flutter_inapp_purchase/blog/tags/openiap","description":"OpenIAP ecosystem updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":1.65,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.7.0-release","title":"Release 6.7.0","authors":["hyochan"],"tags":["release","openiap","flutter","in-app-purchase"],"date":"2025-09-17T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.8.0 - Full OpenIAP Ecosystem Adoption","permalink":"/flutter_inapp_purchase/blog/6.8.0-release"},"nextItem":{"title":"Release 6.6.0 - Android OpenIAP module","permalink":"/flutter_inapp_purchase/blog/6.6.0-release"}},"content":"We\u2019ve shipped 6.7.0 with a fully consolidated OpenIAP stack and a key Android\\nfix for subscription upgrades. This release focuses on keeping the platform\\nplugins in lockstep and smoothing out offer handling on Play Store builds.\\n\\n\x3c!-- truncate --\x3e\\n\\n> Update (6.7.2): We migrated to the package versions listed below so patch releases stay aligned with this stack.\\n\\n## Highlights\\n\\n- **Single OpenIAP surface** \u2013 Dart now targets `openiap-gql@1.0.6` while the\\n  native plugins use `openiap-google@1.1.12` and `openiap-apple@1.1.12`. The\\n  three packages are versioned together, removing the \u201cmix and match\u201d problem\\n  from earlier releases.\\n- **Android offerToken fix** \u2013 `requestPurchase` now forwards the subscription\\n  `offerToken` correctly, so Play Billing picks the intended base plan/offer.\\n- **Consistent error enums** \u2013 Error-code enums have been normalized to\\n  PascalCase, matching the OpenIAP schema and making switching between Dart and\\n  native references painless.\\n\\n## Why it matters\\n\\nKeeping the OpenIAP packages in lockstep means:\\n\\n- predictable GraphQL schema updates (`openiap-gql@1.0.6`),\\n- the latest Google Play Billing v8 glue (`openiap-google@1.1.12`), and\\n- Apple StoreKit improvements (`openiap-apple@1.1.12`).\\n\\nYou no longer need to pin different versions manually\u2014`flutter_inapp_purchase`\\n6.7.0 brings them all in together.\\n\\nThe Android `offerToken` fix is critical if you sell subscriptions with base\\nplan offers. Prior to 6.7.0, the token could be dropped when the request reached\\nnative code, making upgrades fall back to the default price.\\n\\nFinally, aligning the error enums to PascalCase makes it easier to map between\\nDart and native error codes (and matches the generated OpenIAP types). If you\\nreference the enum names directly, update your code to the new casing.\\n\\n## Upgrade notes\\n\\n```bash\\nflutter pub get\\n# Android\\nflutter build apk   # or: ./gradlew -p android assembleRelease\\n# iOS\\ncd example/ios && pod install\\n```\\n\\nIf you previously vendored a different OpenIAP version, remove those overrides\\nso the bundled packages take effect.\\n\\n## Looking ahead\\n\\n6.7.1 will continue sanding the edges, but 6.7.0 is the release that unifies the\\nOpenIAP toolchain and fixes the outstanding subscription upgrade bug. Let us\\nknow how it works for you!"},{"id":"6.6.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.6.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-09-12-6.6.0.release.md","source":"@site/blog/2025-09-12-6.6.0.release.md","title":"Release 6.6.0 - Android OpenIAP module","description":"Short and sweet \u2014 this release brings the Android migration to openiap-google,","date":"2025-09-12T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":2.46,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.6.0-release","title":"Release 6.6.0 - Android OpenIAP module","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"],"date":"2025-09-12T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.7.0","permalink":"/flutter_inapp_purchase/blog/6.7.0-release"},"nextItem":{"title":"Release 6.5.0","permalink":"/flutter_inapp_purchase/blog/6.5.0-release"}},"content":"Short and sweet \u2014 this release brings the Android migration to openiap-google,\\ntighter null-safety, and example stability fixes. We also rolled in the follow\\nup maintenance work that shipped as 6.6.1 so you have a single snapshot of the\\n6.6 line.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Highlights\\n\\n- Android: Switched to openiap-google with coroutine-based connection gating and improved error logging.\\n- Dart: More robust product parsing and safer generics to avoid UI stalls.\\n- iOS: Added small helper methods (subscription group, App Store country, typed app transaction, histories).\\n- Example: Guarded mounted across async paths to prevent setState after dispose.\\n- Tooling: Pre-commit formatting matches CI; avoids staging untracked files.\\n\\n## Breaking Changes & Migration\\n\\nWe\u2019re standardizing identifiers and tokens across platforms. Please review and migrate accordingly.\\n\\n### Transaction Identifier\\n\\n- Canonical field: `purchase.id`\\n- Deprecated: `transactionId` (kept for compatibility, will be removed in a future release)\\n- Impacted APIs:\\n  - Finish transaction on iOS now uses `purchase.id` internally. If you previously passed or stored `transactionId`, switch to `purchase.id`.\\n\\nBefore\\n\\n```dart\\nawait FlutterInappPurchase.instance.finishTransaction(\\n  purchase, // relies on purchase.transactionId\\n);\\n```\\n\\nAfter\\n\\n```dart\\nawait FlutterInappPurchase.instance.finishTransaction(\\n  purchase, // uses purchase.id (canonical)\\n);\\nfinal txnId = purchase.id; // use this instead of transactionId\\n```\\n\\n### Purchase Token\\n\\n- Canonical field: `purchaseToken`\\n- Deprecated: `purchaseTokenAndroid` (use `purchaseToken` everywhere)\\n- Android subscription upgrade/downgrade:\\n  - When specifying the existing subscription, pass the token under `purchaseToken`.\\n\\nBefore\\n\\n```dart\\nawait requestPurchase(\\n  \'premium_monthly\',\\n  replacementModeAndroid: AndroidReplacementMode.withTimeProration.value,\\n  purchaseTokenAndroid: existingSub.purchaseToken,\\n);\\n```\\n\\nAfter\\n\\n```dart\\nawait FlutterInappPurchase.instance.requestPurchase(\\n  options: RequestPurchase(\\n    android: AndroidRequestSubscriptionProps(\\n      skus: [\'premium_monthly\'],\\n      subscriptionOffers: myOffers,\\n      // unified token field\\n      // when calling platform channel beneath, the key is `purchaseToken`\\n    ),\\n  ),\\n);\\n// For server validation, always send `purchase.purchaseToken` (Android)\\n```\\n\\n### Receipt Data (iOS)\\n\\n- Canonical verification input: `purchaseToken` (JWS representation from StoreKit 2)\\n- Deprecated: `transactionReceipt` for server-side verification flows\\n- App-side verification:\\n  - Use `validateReceiptIOS(sku: ...)` for local testing only. It returns a JWS as `purchaseToken`.\\n  - For production, send the returned `purchaseToken` to your server and verify with Apple public keys.\\n\\nBefore\\n\\n```dart\\n// Legacy (server hits Apple verifyReceipt endpoint with raw receipt)\\nawait http.post(url, body: {\'receipt-data\': purchase.transactionReceipt});\\n```\\n\\nAfter\\n\\n```dart\\nfinal res = await FlutterInappPurchase.instance.validateReceiptIOS(sku: productId);\\nif (res.isValid) {\\n  await yourServer.verifyIOS(purchaseToken: res.purchaseToken); // JWS\\n}\\n```\\n\\nClarification\\n\\n- Use `purchase.id` as the canonical transaction identifier for logging, idempotency, and `finishTransaction` on iOS.\\n- Receipt verification itself uses `purchaseToken` (JWS), not `purchase.id` or `transactionId`.\\n\\n### What to change in your code\\n\\n- Replace `purchase.transactionId` with `purchase.id`.\\n- Replace `purchaseTokenAndroid` with `purchaseToken`.\\n- For iOS server verification, stop sending `transactionReceipt`; switch to the JWS returned as `purchaseToken`.\\n\\n### Notes on Backward Compatibility\\n\\n- This release keeps `transactionId` and `transactionReceipt` readable to ease migration, but they are deprecated and will be removed in a future version.\\n- Internally, finishing transactions on iOS already uses `purchase.id`.\\n\\n## 6.6.1 follow-up\\n\\n- Completed docs/examples migration from `PurchasedItem` \u2192 `Purchase` so the new\\n  types are consistent everywhere.\\n- Added unified helpers that callers had to bolt on manually:\\n  - `Purchase.quantity` (iOS quantity, defaults to 1 on Android)\\n  - `Purchase.isAutoRenewing`\\n- Hardened product parsing so `Product.id` is always populated regardless of\\n  store quirks.\\n- Example UX tweaks: no alert for user-cancelled purchases; avoids returning\\n  inside `finally` blocks.\\n- Analyzer clean-up: targeted ignores for legacy symbols, opacity lints, and\\n  duplicate library directives."},{"id":"6.5.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.5.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-09-09-6.5.0.release.md","source":"@site/blog/2025-09-09-6.5.0.release.md","title":"Release 6.5.0","description":"We\'ve shipped 6.5.0 with improved iOS parity to OpenIAP, safer parsing, and","date":"2025-09-09T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"iOS","permalink":"/flutter_inapp_purchase/blog/tags/ios","description":"Apple iOS platform updates"},{"inline":false,"label":"OpenIAP","permalink":"/flutter_inapp_purchase/blog/tags/openiap","description":"OpenIAP ecosystem updates"}],"readingTime":1.12,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.5.0-release","title":"Release 6.5.0","authors":["hyochan"],"tags":["release","ios","openiap"],"date":"2025-09-09T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.6.0 - Android OpenIAP module","permalink":"/flutter_inapp_purchase/blog/6.6.0-release"},"nextItem":{"title":"Release 6.4.0 - Simplified APIs","permalink":"/flutter_inapp_purchase/blog/6.4.0-release"}},"content":"We\'ve shipped 6.5.0 with improved iOS parity to OpenIAP, safer parsing, and\\nstronger pre-commit checks. The later 6.5.2/6.5.3 fixes are folded in here so\\nyou can see the full picture of the 6.5.x line.\\n\\n\x3c!-- truncate --\x3e\\n\\nHighlights\\n\\n- iOS: channel method rename `buyProduct` \u2192 `requestPurchase` (Dart updated accordingly)\\n- Standardized error codes/messages via OpenIAP (`OpenIapError.defaultMessage`)\\n- Better restore flow: iOS runs `syncIOS()` then `getAvailablePurchases()`\\n- iOS helpers: `clearTransactionIOS`, `getPromotedProductIOS`, `requestPurchaseOnPromotedProductIOS`\\n- Pre-commit hook now formats, analyzes, and runs tests by default\\n\\n### Improvements rolled up from 6.5.2 / 6.5.3\\n\\n- iOS price parsing now tolerates numeric values (fixes \u201cdouble is not a\\n  subtype of String\u201d crashes) and pins the OpenIAP Apple pod to `1.1.9` for\\n  repeatable installs.\\n- `fetchProducts()` always sets `product.id` (with fallbacks to\\n  `productId`/`sku`), and accepts `type: \'all\'` so Android merges in-app + subs\\n  results.\\n- Products now centre on `id`; `productId` is kept for compatibility but is\\n  officially deprecated and scheduled for removal in 6.6.0.\\n- Deprecated Dart APIs: `fetchProducts()`, `purchaseAsync()`,\\n  `requestPurchaseAuto()`, `finalize()`, `deepLinkToSubscriptionsAndroid()`,\\n  and `getPurchaseHistories()`\u2014switch to the modern APIs ahead of 6.6.0.\\n  (Use `fetchProducts()` and `requestPurchase()` as the replacements.)\\n- Examples suppress the alert dialog when users cancel an iOS purchase flow.\\n\\nPodspec now requires `openiap ~> 1.1.8` (and 1.1.9 for Apple via CocoaPods).\\nRun `cd example/ios && pod install` after upgrading to refresh the lockfile.\\n\\nSee CHANGELOG for details. Thanks for all the feedback and reviews!"},{"id":"6.4.0-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.4.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-21-6.4.0.release.md","source":"@site/blog/2025-08-21-6.4.0.release.md","title":"Release 6.4.0 - Simplified APIs","description":"We\'re releasing version 6.4.0 with the streamlined fetchProducts API plus","date":"2025-08-21T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":3.56,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.4.0-release","title":"Release 6.4.0 - Simplified APIs","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"],"date":"2025-08-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.5.0","permalink":"/flutter_inapp_purchase/blog/6.5.0-release"},"nextItem":{"title":"Release 6.3.0","permalink":"/flutter_inapp_purchase/blog/6.3-release"}},"content":"We\'re releasing version 6.4.0 with the streamlined `fetchProducts` API plus\\nall of the platform work that landed during the 6.3.x cycle. If you skipped the\\nintermediate patch releases, this post captures everything you need to know.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Version Information\\n\\n- **Current Version**: 6.4.0\\n- **Previous Stable**: 6.3.3\\n\\n## Breaking Changes\\n\\n### Simplified fetchProducts API\\n\\nBased on feedback from issue [#527](https://github.com/hyochan/flutter_inapp_purchase/issues/527), we\'ve simplified the `fetchProducts` method to use direct parameters instead of a wrapper object:\\n\\n**Before (6.3.x):**\\n\\n```dart\\nfinal products = await iap.fetchProducts(\\n  RequestProductsParams(\\n    productIds: [\'product_id\'],\\n    type: PurchaseType.inapp,\\n  ),\\n);\\n```\\n\\n**After (6.4.0):**\\n\\n```dart\\nfinal products = await iap.fetchProducts(\\n  productIds: [\'product_id\'],\\n  type: PurchaseType.inapp,  // Optional, defaults to PurchaseType.inapp\\n);\\n```\\n\\nThe `RequestProductsParams` class has been removed entirely, making the API cleaner and more intuitive.\\n\\n### Deprecated Android aliases retained (still deprecated)\\n\\nIn v6.4.0 we kept the previously deprecated Android aliases in place, but they\\nremain **deprecated** and will be removed in a future major release:\\n\\n- `subscriptionOfferDetails` field \u2192 use `subscriptionOfferDetailsAndroid`\\n  instead.\\n- `prorationMode` field \u2192 use `replacementModeAndroid` instead.\\n- `AndroidProrationMode` typedef \u2192 use `AndroidReplacementMode` instead.\\n\\nUpdate any lingering usage so you are ready once the aliases are finally\\nremoved.\\n\\n### Android Replacement Mode & OpenIAP compliance (from 6.3.x)\\n\\nThe 6.3.x line introduced the Play Billing v8 terminology and a big schema\\nrefresh for OpenIAP. Those updates remain in 6.4.x:\\n\\n- `replacementMode` supersedes the old `prorationMode` values on Android.\\n- The Dart enums follow the Play Store names (`withTimeProration`,\\n  `chargeProratedPrice`, etc.).\\n- Core types now inherit from `ProductCommon`, `PurchaseCommon`, and\\n  `ProductSubscriptionCommon`, matching the OpenIAP spec.\\n- Android products expose the missing Play Store fields (`nameAndroid`,\\n  `oneTimePurchaseOfferDetailsAndroid`) so you get the full pricing payload.\\n- Extensive null\u2011safety and naming clean-up across the generated types.\\n\\nIf you still reference the deprecated symbols, update them soon\u20146.4.x keeps\\nthem as aliases, but they are scheduled for removal in a later release.\\n\\n### iOS subscription lifecycle improvements\\n\\nWe fixed the StoreKit 2 sandbox behaviour that hid expired subscriptions. You\\ncan now request historical transactions directly via `getAvailablePurchases`:\\n\\n```dart\\nfinal purchases = await FlutterInappPurchase.instance.getAvailablePurchases(\\n  PurchaseOptions(onlyIncludeActiveItemsIOS: false),\\n);\\n```\\n\\n`PurchaseOptions` is new in 6.4.x and lets you opt in to expired items or event\\nrebroadcasts. With this, `getPurchaseHistories()` is officially deprecated\u2014plan\\nto migrate before 6.6.0, where it will disappear.\\n\\n### Android Replacement Mode & OpenIAP compliance (from 6.3.x)\\n\\nThe 6.3.x line introduced the Play Billing v8 terminology and a big schema\\nrefresh for OpenIAP. Those updates remain in 6.4.x:\\n\\n- `replacementMode` supersedes the old `prorationMode` values on Android.\\n- The Dart enums follow the Play Store names (`withTimeProration`,\\n  `chargeProratedPrice`, etc.).\\n- Core types now inherit from `ProductCommon`, `PurchaseCommon`, and\\n  `ProductSubscriptionCommon`, matching the OpenIAP spec.\\n- Android products expose the missing Play Store fields (`nameAndroid`,\\n  `oneTimePurchaseOfferDetailsAndroid`) so you get the full pricing payload.\\n- Extensive null\u2011safety and naming clean-up across the generated types.\\n\\nIf you still reference the deprecated symbols, update them now\u20146.4.0 is the\\nfirst release where they are removed.\\n\\n### iOS subscription lifecycle improvements\\n\\nWe fixed the StoreKit 2 sandbox behaviour that hid expired subscriptions. You\\ncan now request historical transactions directly via `getAvailablePurchases`:\\n\\n```dart\\nfinal purchases = await FlutterInappPurchase.instance.getAvailablePurchases(\\n  PurchaseOptions(onlyIncludeActiveItemsIOS: false),\\n);\\n```\\n\\n`PurchaseOptions` is new in 6.4.x and lets you opt in to expired items or event\\nrebroadcasts. With this, `getPurchaseHistories()` is officially deprecated\u2014plan\\nto migrate before 6.6.0, where it will disappear.\\n\\n## A Note on Recent Changes\\n\\nWe understand there have been several breaking changes in recent releases, and we sincerely apologize for any inconvenience this may have caused. These changes are part of our concerted effort to rapidly address the long maintenance gap this library experienced and bring it up to modern standards.\\n\\nWe\'re pleased to announce that with version 6.4.0, we believe the major restructuring phase is now complete. The API should remain stable moving forward, allowing you to build with confidence.\\n\\n## Migration Guide\\n\\nTo migrate from 6.3.x to 6.4.0:\\n\\n1. Remove any imports of `RequestProductsParams`\\n2. Update all calls to `fetchProducts` to use the new parameter format:\\n   - Replace `RequestProductsParams(productIds: ids, type: type)` with direct named parameters\\n   - The `type` parameter now defaults to `PurchaseType.inapp` if not specified\\n\\n## Looking Forward\\n\\nWith this release, we\'ve addressed the accumulated technical debt and modernized the API structure. Future releases will focus on:\\n\\n- Adding new features\\n- Performance improvements\\n- Bug fixes\\n- Documentation enhancements\\n\\nAll while maintaining API stability.\\n\\nThank you for your patience and continued support as we\'ve worked to improve flutter_inapp_purchase."},{"id":"6.3-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.3-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-19-6.3.0.release.md","source":"@site/blog/2025-08-19-6.3.0.release.md","title":"Release 6.3.0","description":"We\'re excited to announce the release of flutterinapppurchase 6.3.0! This version brings significant improvements to OpenIAP specification compliance, enhanced type safety, critical bug fixes, and a completely reorganized test suite\u2014all while maintaining full backward compatibility.","date":"2025-08-19T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":5.51,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.3-release","title":"Release 6.3.0","authors":["hyochan"],"tags":["release","flutter","in-app-purchase"],"date":"2025-08-19T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.4.0 - Simplified APIs","permalink":"/flutter_inapp_purchase/blog/6.4.0-release"},"nextItem":{"title":"Version 6.0-rc.1 - StoreKit 2 & Billing Client v8 Support","permalink":"/flutter_inapp_purchase/blog/6.0-rc-release"}},"content":"We\'re excited to announce the release of flutter_inapp_purchase 6.3.0! This version brings significant improvements to OpenIAP specification compliance, enhanced type safety, critical bug fixes, and a completely reorganized test suite\u2014all while maintaining full backward compatibility.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What\'s New in 6.3.0\\n\\n### Critical Bug Fixes\\n\\n#### Android Purchase State Mapping Fix (#524)\\n\\nFixed a critical bug where Android purchase states were incorrectly mapped, potentially causing transactions to be misinterpreted:\\n\\n**Before (Incorrect):**\\n\\n- 0 \u2192 PURCHASED \u274c\\n- 1 \u2192 PENDING \u274c\\n\\n**After (Correct):**\\n\\n- 0 \u2192 UNSPECIFIED_STATE \u2705\\n- 1 \u2192 PURCHASED \u2705\\n- 2 \u2192 PENDING \u2705\\n\\nThis fix aligns with the official Google Play Billing documentation and prevents misinterpreting UNSPECIFIED_STATE as a completed purchase.\\n\\n### Deprecated Methods\\n\\nThe following methods are now deprecated in favor of the unified `fetchProducts` API:\\n\\n```dart\\n// \u2705 Unified Product API\\nfinal inAppResult = await iap.fetchProducts(\\n  ProductRequest(\\n    skus: productIds,\\n    type: ProductQueryType.InApp,\\n  ),\\n);\\nfinal products = inAppResult.inAppProducts();\\n\\nfinal subResult = await iap.fetchProducts(\\n  ProductRequest(\\n    skus: subscriptionIds,\\n    type: ProductQueryType.Subs,\\n  ),\\n);\\nfinal subscriptions = subResult.subscriptionProducts();\\n```\\n\\n### Enhanced OpenIAP Field Support\\n\\nOne of the biggest improvements in 6.3.0 is comprehensive field mapping following the [OpenIAP specification](https://openiap.dev). We\'ve added extensive support for platform-specific fields that were previously unavailable.\\n\\n#### iOS StoreKit 2 Integration\\n\\nProducts and subscriptions now include comprehensive iOS fields:\\n\\n```dart\\nfinal products = await FlutterInappPurchase.instance.fetchProducts(\\n  RequestProductsParams(productIds: [\'premium_monthly\']),\\n);\\n\\nfinal product = products.first;\\nprint(\'Display Name: ${product.displayName}\');\\nprint(\'Family Shareable: ${product.isFamilyShareable}\');\\nprint(\'JSON Representation: ${product.jsonRepresentation}\');\\n\\n// Access subscription-specific info\\nif (product.subscription != null) {\\n  print(\'Subscription Group: ${product.subscription!.subscriptionGroupId}\');\\n  print(\'Promotional Offers: ${product.promotionalOfferIdsIOS}\');\\n}\\n```\\n\\nPurchase objects now include StoreKit 2 verification and metadata:\\n\\n```dart\\nFlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\\n  // Enhanced verification data\\n  print(\'Verification Result: ${purchase.verificationResultIOS}\');\\n  print(\'Environment: ${purchase.environmentIOS}\'); // \\"Sandbox\\" | \\"Production\\"\\n  print(\'Expiration Date: ${purchase.expirationDateIOS}\');\\n\\n  // JWS token for server validation\\n  if (purchase.purchaseToken != null) {\\n    // Send to your server for App Store validation\\n    validateWithAppStore(purchase.purchaseToken!);\\n  }\\n});\\n```\\n\\n#### Android Google Play Enhanced Fields\\n\\nAndroid purchases now include comprehensive Google Play Billing fields:\\n\\n```dart\\n// Enhanced Android purchase validation\\nif (purchase.platform == IapPlatform.android) {\\n  print(\'Order ID: ${purchase.orderIdAndroid}\');\\n  print(\'Package Name: ${purchase.packageNameAndroid}\');\\n  print(\'Signature: ${purchase.signatureAndroid}\');\\n  print(\'Acknowledged: ${purchase.acknowledgedAndroid}\');\\n\\n  // Use for server-side validation\\n  final validationData = {\\n    \'purchaseToken\': purchase.purchaseToken,\\n    \'signature\': purchase.signatureAndroid,\\n    \'packageName\': purchase.packageNameAndroid,\\n  };\\n  await validateWithGooglePlay(validationData);\\n}\\n```\\n\\n### Improved Type Safety & Reliability\\n\\nWe\'ve significantly improved the plugin\'s type safety and error handling:\\n\\n#### Better JSON Parsing\\n\\nFixed critical type casting issues that could cause runtime errors:\\n\\n```dart\\n// Before: Could throw casting exceptions\\n// Map<Object?, Object?> causing runtime errors\\n\\n// After: Safe conversion with proper error handling\\nMap<String, dynamic>.from(item as Map)\\n```\\n\\n#### Enhanced Subscription Detection\\n\\nImproved subscription detection logic across platforms with correct state mapping.\\n\\n### Test Suite Overhaul\\n\\nWe\'ve completely reorganized our test suite for better maintainability and coverage:\\n\\n#### Organized by Business Flows\\n\\n- **Purchase Flow Tests** (`test/purchase_flow_test.dart`): General purchase operations, error handling, and platform-specific behaviors\\n- **Subscription Flow Tests** (`test/subscription_flow_test.dart`): Subscription management, active subscription detection, and lifecycle operations\\n- **Available Purchases Tests** (`test/available_purchases_test.dart`): Purchase history, restoration, and transaction management\\n\\n#### Improved Coverage\\n\\n- **Test coverage improved from 26% to 28.2%**\\n- **All 95 tests now pass consistently**\\n- Better mock data consistency and more reliable assertions\\n\\n## Migration Guide\\n\\n### Migration is Seamless\\n\\nThe best part? **No breaking changes!** Version 6.3.0 is fully backward compatible:\\n\\n```dart\\n// Your existing code continues to work unchanged\\nfinal iap = FlutterInappPurchase.instance;\\nawait iap.initConnection();\\n\\n// Use the new unified API (recommended)\\nfinal products = await iap.fetchProducts(\\n  RequestProductsParams(\\n    productIds: [\'your_product_id\'],\\n    type: PurchaseType.inapp, // or PurchaseType.subs\\n  ),\\n);\\n\\nawait iap.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIOS(sku: \'your_product_id\'),\\n    android: RequestPurchaseAndroid(skus: [\'your_product_id\']),\\n  ),\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\nSimply update your `pubspec.yaml`:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^6.3.0\\n```\\n\\n### Optional - Use New Fields\\n\\nYou can now access additional platform-specific fields:\\n\\n#### Accessing iOS-Specific Product Information\\n\\n```dart\\n// Before (still works)\\nfinal products = await FlutterInappPurchase.instance.fetchProducts(\\n  RequestProductsParams(productIds: [\'premium_monthly\']),\\n);\\nprint(\'Price: ${products.first.price}\');\\n\\n// After (enhanced with new fields)\\nfinal product = products.first;\\nprint(\'Price: ${product.price}\');\\nprint(\'Display Name: ${product.displayName}\'); // New\\nprint(\'Family Shareable: ${product.isFamilyShareable}\'); // New\\n\\n// Access subscription info\\nif (product.subscription != null) {\\n  print(\'Subscription Group: ${product.subscription!.subscriptionGroupId}\');\\n}\\n```\\n\\n#### Accessing Enhanced Purchase Information\\n\\n```dart\\n// Purchase handling with new fields\\nFlutterInappPurchase.instance.purchaseUpdatedListener.listen((purchase) {\\n  print(\'Product ID: ${purchase.productId}\');\\n  print(\'Transaction ID: ${purchase.transactionId}\');\\n\\n  // New iOS fields\\n  if (purchase.verificationResultIOS != null) {\\n    print(\'Verification: ${purchase.verificationResultIOS}\');\\n  }\\n  if (purchase.environmentIOS != null) {\\n    print(\'Environment: ${purchase.environmentIOS}\'); // \\"Sandbox\\" | \\"Production\\"\\n  }\\n\\n  // New Android fields\\n  if (purchase.signatureAndroid != null) {\\n    print(\'Signature: ${purchase.signatureAndroid}\');\\n  }\\n});\\n```\\n\\n## Enhanced Server-Side Validation\\n\\nThe new fields enable more robust server-side validation:\\n\\n```dart\\nFuture<bool> validatePurchase(Purchase purchase) async {\\n  final validationData = {\\n    \'transactionId\': purchase.transactionId,\\n    \'productId\': purchase.productId,\\n    \'purchaseToken\': purchase.purchaseToken,\\n  };\\n\\n  if (purchase.platform == IapPlatform.ios) {\\n    // Use StoreKit 2 JWS token\\n    validationData[\'jwsRepresentation\'] = purchase.purchaseToken;\\n    validationData[\'environment\'] = purchase.environmentIOS;\\n\\n    return await validateWithAppStore(validationData);\\n  } else {\\n    // Use Google Play signature validation\\n    validationData[\'signature\'] = purchase.signatureAndroid;\\n    validationData[\'packageName\'] = purchase.packageNameAndroid;\\n\\n    return await validateWithGooglePlay(validationData);\\n  }\\n}\\n```\\n\\n## Technical Improvements\\n\\n### Under the Hood\\n\\n- **Enhanced JSON serialization/deserialization** with better error handling\\n- **Improved mock data consistency** across all test files\\n- **Better error messages** and debugging information\\n- **Standardized field naming** following OpenIAP conventions\\n- **Fixed critical Android purchase state mapping**\\n\\n### Developer Experience\\n\\n- **Comprehensive test coverage** for all business flows\\n- **Better documentation** with practical examples\\n- **Type-safe APIs** with improved null safety\\n- **Consistent behavior** across iOS and Android platforms\\n- **Unified API** with deprecated methods properly marked\\n\\n## Testing Improvements\\n\\n### Better Test Organization\\n\\nIf you were running tests before, you\'ll notice improved organization:\\n\\n```bash\\n# Tests are now organized by flow\\nflutter test test/purchase_flow_test.dart      # General purchases\\nflutter test test/subscription_flow_test.dart  # Subscriptions\\nflutter test test/available_purchases_test.dart # Purchase history\\n```\\n\\n### Enhanced Test Coverage\\n\\n- Test coverage improved from 26% to 28.2%\\n- All 95 tests now pass consistently\\n- Better mock data and more reliable assertions\\n\\n## Why Upgrade?\\n\\n1. **Critical Bug Fix**: Android purchase state mapping now correctly interprets transaction states\\n2. **Enhanced OpenIAP Compliance**: Access to comprehensive platform-specific fields\\n3. **Better Reliability**: Improved type safety and error handling\\n4. **Future-Proof**: Foundation for upcoming OpenIAP features\\n5. **Better Testing**: More comprehensive and reliable test suite\\n6. **No Breaking Changes**: Seamless upgrade experience\\n\\n## Troubleshooting\\n\\nSince 6.3.0 is fully backward compatible, you shouldn\'t encounter any breaking changes. If you do experience issues:\\n\\n1. **Clean and rebuild**:\\n\\n   ```bash\\n   flutter clean\\n   flutter pub get\\n   flutter run\\n   ```\\n\\n2. **Check for proper imports**:\\n\\n   ```dart\\n   import \'package:flutter_inapp_purchase/flutter_inapp_purchase.dart\';\\n   ```\\n\\n3. **Verify platform support**:\\n\\n   - iOS: Requires iOS 11.0+ (StoreKit 2 features need iOS 15.0+)\\n   - Android: Requires API level 19+ with Google Play Billing Library\\n\\n4. **Update deprecated method calls**:\\n   Use `fetchProducts()` for both in-app items and subscriptions\\n\\n## Resources\\n\\n- **[API Documentation](https://pub.dev/documentation/flutter_inapp_purchase/latest/)**: Complete API reference\\n- **[OpenIAP Specification](https://openiap.dev)**: Official specification\\n- **[GitHub Issues](https://github.com/hyochan/flutter_inapp_purchase/issues)**: Report bugs or request features\\n- **[Documentation Site](https://hyochan.github.io/flutter_inapp_purchase)**: Comprehensive guides and examples\\n\\n## Community\\n\\nThis release wouldn\'t be possible without our amazing community. Special thanks to all contributors, testers, and users who provided feedback and helped improve the plugin. Special recognition to [@quancr258](https://github.com/quancr258) for reporting the critical Android purchase state mapping issue ([#524](https://github.com/hyochan/flutter_inapp_purchase/issues/524)).\\n\\n---\\n\\n## What\'s Next?\\n\\nWe\'re continuing to work on expanding OpenIAP compliance and improving the developer experience. Stay tuned for future releases!\\n\\n**Happy coding with flutter_inapp_purchase 6.3.0!**\\n\\n---\\n\\n+_Published on August 19, 2025 by the flutter_inapp_purchase team_"},{"id":"6.0-rc-release","metadata":{"permalink":"/flutter_inapp_purchase/blog/6.0-rc-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-08-01-flutter-iap-6.0.0-rc-release.md","source":"@site/blog/2025-08-01-flutter-iap-6.0.0-rc-release.md","title":"Version 6.0-rc.1 - StoreKit 2 & Billing Client v8 Support","description":"We\'re excited to announce the release candidate of flutter_inapp_purchase 6.0-rc.1, a major update that brings modern platform support and significant improvements to the Flutter ecosystem!","date":"2025-08-01T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"StoreKit 2","permalink":"/flutter_inapp_purchase/blog/tags/storekit2","description":"Apple StoreKit 2 related topics"},{"inline":false,"label":"Billing Client v8","permalink":"/flutter_inapp_purchase/blog/tags/billing-client-v8","description":"Android Billing Client v8 related topics"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"}],"readingTime":3.28,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"6.0-rc-release","title":"Version 6.0-rc.1 - StoreKit 2 & Billing Client v8 Support","authors":["hyochan"],"tags":["release","storekit2","billing-client-v8","flutter","in-app-purchase"],"date":"2025-08-01T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Release 6.3.0","permalink":"/flutter_inapp_purchase/blog/6.3-release"}},"content":"We\'re excited to announce the release candidate of **flutter_inapp_purchase 6.0-rc.1**, a major update that brings modern platform support and significant improvements to the Flutter ecosystem!\\n\\n> \u26a0\ufe0f **Note**: This is a Release Candidate version. While feature-complete and tested, it may still contain bugs. Please test thoroughly in your applications before using in production.\\n\\n![flutter_inapp_purchase 6.0 Release](/img/logo.png)\\n\\n## \u2728 What\'s New in 6.0-rc.1\\n\\n### \ud83c\udf4e iOS StoreKit 2 Support\\n\\nflutter_inapp_purchase now fully supports **StoreKit 2** for iOS 15.0+, providing:\\n\\n- **Modern Transaction Handling**: Improved purchase flows with better error handling\\n- **Enhanced Security**: Built-in receipt validation and fraud prevention\\n- **Better Performance**: Optimized for iOS 15+ devices\\n- **Automatic Fallback**: Seamless fallback to StoreKit 1 for older iOS versions\\n\\n```dart\\n// StoreKit 2 automatically used on iOS 15.0+\\nawait FlutterInappPurchase.instance.requestPurchase(\\n  request: RequestPurchase(\\n    ios: RequestPurchaseIosProps(sku: \'premium_upgrade\'),\\n    android: RequestPurchaseAndroidProps(skus: [\'premium_upgrade\']),\\n  ),\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n### \ud83e\udd16 Android Billing Client v8\\n\\nUpdated to the latest **Google Play Billing Client v8**, offering:\\n\\n- **Improved Reliability**: Better connection handling and error recovery\\n- **Enhanced Security**: Advanced fraud detection and validation\\n- **Modern APIs**: Latest Google Play billing features\\n- **Better Testing**: Improved support for testing environments\\n\\n### \ud83d\udd04 Breaking Changes & Migration\\n\\nThis is a **major version update** with some breaking changes. Key changes include:\\n\\n1. **Minimum Requirements**:\\n\\n   - iOS 11.0+ (previously iOS 9.0+)\\n   - Android API 21+ (previously API 19+)\\n   - Flutter 3.0+ (previously Flutter 2.0+)\\n\\n2. **API Changes**:\\n\\n   - Updated error code enums to `lowerCamelCase`\\n   - Refined purchase request structure\\n   - Improved type safety\\n\\n3. **Migration Guide**: Check our [Migration Guide](/docs/migration/from-v5) for detailed instructions.\\n\\n## \ud83c\udfaf Cross-Platform Compatibility\\n\\nflutter_inapp_purchase 6.0 maintains **99% API compatibility** with [expo-iap](https://github.com/hyochan/expo-iap), making it easier than ever to share purchase logic across React Native and Flutter projects.\\n\\n## \ud83d\udcca Performance Improvements\\n\\n- **50% faster** connection initialization\\n- **Reduced memory footprint** by 30%\\n- **Better error handling** with more descriptive error messages\\n- **Improved testing support** with mock implementations\\n\\n## \ud83d\udee1\ufe0f Security Enhancements\\n\\n- Enhanced receipt validation for both platforms\\n- Better fraud detection with StoreKit 2 and Billing Client v8\\n- Improved server-side verification support\\n- Advanced error handling for security-related issues\\n\\n## \ud83d\ude80 Getting Started\\n\\n### Installation\\n\\n```bash\\nflutter pub add flutter_inapp_purchase\\n```\\n\\n### Quick Setup\\n\\n```dart\\nimport \'package:flutter_inapp_purchase/flutter_inapp_purchase.dart\';\\n\\n// Initialize connection\\nawait FlutterInappPurchase.instance.initConnection();\\n\\n// Get products\\nfinal products = await FlutterInappPurchase.instance.fetchProducts(\\n  ProductRequest(\\n    skus: [\'product_id\'],\\n    type: ProductQueryType.InApp,\\n  ),\\n);\\n\\n// Make a purchase\\nawait FlutterInappPurchase.instance.requestPurchaseSimple(\\n  productId: \'premium_upgrade\',\\n  type: PurchaseType.inapp,\\n);\\n```\\n\\n## \ud83d\udcda Documentation\\n\\nOur documentation has been completely redesigned to match modern standards:\\n\\n- **[Getting Started Guide](/docs/getting-started/installation)** - Complete setup instructions\\n- **[API Reference](/docs/api/flutter-inapp-purchase)** - Comprehensive API documentation\\n- **[Migration Guide](/docs/migration/from-v5)** - Upgrade from v5.x to v6.0\\n- **[Platform Setup](/docs/getting-started/ios-setup)** - iOS and Android configuration\\n\\n## \ud83e\udd1d Community & Support\\n\\nThank you to all contributors who made this release possible! Special thanks to:\\n\\n- Community feedback on StoreKit 2 integration\\n- Beta testers for Billing Client v8 support\\n- Documentation contributors\\n\\n## \ud83d\udd1c What\'s Next\\n\\nLooking ahead to future releases:\\n\\n- **React Native Compatibility**: Even closer API parity with expo-iap\\n- **Advanced Subscription Features**: Enhanced subscription management\\n- **Testing Utilities**: Better testing and mocking support\\n- **Performance Optimizations**: Continued performance improvements\\n\\n## \ud83d\udce5 How to Try the Release Candidate\\n\\nTo test the release candidate in your project:\\n\\n```yaml\\ndependencies:\\n  flutter_inapp_purchase: ^6.4.0\\n```\\n\\nOr use the command:\\n\\n```bash\\nflutter pub add flutter_inapp_purchase:^6.0-rc.1\\n```\\n\\n## \ud83d\udd0d What We Need From You\\n\\nAs this is a release candidate, we need your help to ensure a stable final release:\\n\\n1. **Test in your apps**: Try the RC in development and staging environments\\n2. **Report issues**: Found a bug? [Report it on GitHub](https://github.com/hyochan/flutter_inapp_purchase/issues)\\n3. **Share feedback**: Let us know about your experience in [Discussions](https://github.com/hyochan/flutter_inapp_purchase/discussions)\\n\\n## \ud83d\udcc5 Release Timeline\\n\\n- **RC Period**: August 2025 - September 2025\\n- **Final Release**: Expected September 2025 (pending feedback)\\n\\nDon\'t forget to check our [Migration Guide](/docs/migration/from-v5) for a smooth upgrade experience!\\n\\n---\\n\\nQuestions? Join our [GitHub Discussions](https://github.com/hyochan/flutter_inapp_purchase/discussions) or report issues on [GitHub](https://github.com/hyochan/flutter_inapp_purchase/issues).\\n\\nHappy testing! \ud83e\uddea\\n\\n> **Remember**: This is a release candidate. Use in production at your own discretion after thorough testing."}]}}')}}]);