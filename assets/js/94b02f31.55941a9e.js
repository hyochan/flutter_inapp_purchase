"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[130],{744:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/offer-code-redemption","title":"Offer Code Redemption","description":"This guide explains how to implement offer code redemption functionality in your app using flutterinapppurchase.","source":"@site/docs/guides/offer-code-redemption.md","sourceDirName":"guides","slug":"/guides/offer-code-redemption","permalink":"/flutter_inapp_purchase/docs/guides/offer-code-redemption","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/guides/offer-code-redemption.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Offer Code Redemption"},"sidebar":"docsSidebar","previous":{"title":"Subscription Validation","permalink":"/flutter_inapp_purchase/docs/guides/subscription-validation"},"next":{"title":"Alternative Billing","permalink":"/flutter_inapp_purchase/docs/guides/alternative-billing"}}');var t=r(4848),s=r(8453);const o={sidebar_position:5,title:"Offer Code Redemption"},a="Offer Code Redemption",d={},l=[{value:"Overview",id:"overview",level:2},{value:"iOS Implementation",id:"ios-implementation",level:2},{value:"Usage",id:"usage",level:3},{value:"Important Notes",id:"important-notes",level:3},{value:"Android Implementation",id:"android-implementation",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Alternative Approach",id:"alternative-approach",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing",id:"testing",level:2},{value:"iOS Testing",id:"ios-testing",level:3},{value:"Android Testing",id:"android-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"iOS Issues",id:"ios-issues",level:3},{value:"Android Issues",id:"android-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"offer-code-redemption",children:"Offer Code Redemption"})}),"\n",(0,t.jsx)(n.p,{children:"This guide explains how to implement offer code redemption functionality in your app using flutter_inapp_purchase."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Offer codes (also known as promo codes or redemption codes) allow users to redeem special offers for in-app purchases and subscriptions. The implementation differs between iOS and Android platforms."}),"\n",(0,t.jsx)(n.h2,{id:"ios-implementation",children:"iOS Implementation"}),"\n",(0,t.jsx)(n.p,{children:"On iOS, flutter_inapp_purchase provides a native method to present Apple's code redemption sheet directly within your app."}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\n// Present the code redemption sheet\nFuture<void> presentRedemptionSheet() async {\n  if (!Platform.isIOS) {\n    print('Offer code redemption is only available on iOS');\n    return;\n  }\n\n  try {\n    await FlutterInappPurchase.instance.presentCodeRedemptionSheetIOS();\n    print('Code redemption sheet presented successfully');\n    // The system will handle the redemption process\n    // Listen for purchase updates via purchaseUpdatedListener\n  } catch (error) {\n    print('Failed to present code redemption sheet: $error');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"important-notes",children:"Important Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"This method only works on real iOS devices (not simulators)"}),"\n",(0,t.jsx)(n.li,{children:"The redemption sheet is handled by the iOS system"}),"\n",(0,t.jsxs)(n.li,{children:["After successful redemption, purchase updates will be delivered through your existing ",(0,t.jsx)(n.code,{children:"purchaseUpdatedListener"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"android-implementation",children:"Android Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Google Play does not provide a direct API to redeem codes within the app. Instead, users must redeem codes through the Google Play Store app or website."}),"\n",(0,t.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\n// Open Google Play Store subscription management\nFuture<void> openPlayStoreRedemption() async {\n  if (!Platform.isAndroid) {\n    print('This feature is only available on Android');\n    return;\n  }\n\n  try {\n    await FlutterInappPurchase.instance.deepLinkToSubscriptions();\n    // This will open the Play Store where users can manage subscriptions\n  } catch (error) {\n    print('Failed to open Play Store: $error');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"alternative-approach",children:"Alternative Approach"}),"\n",(0,t.jsx)(n.p,{children:"You can also direct users to redeem codes via a custom URL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'package:url_launcher/url_launcher.dart';\n\nFuture<void> redeemCode(String code) async {\n  final url = Uri.parse('https://play.google.com/redeem?code=$code');\n  if (await canLaunchUrl(url)) {\n    await launchUrl(url, mode: LaunchMode.externalApplication);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example that handles both platforms:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"import 'dart:io';\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass OfferCodeScreen extends StatefulWidget {\n  const OfferCodeScreen({Key? key}) : super(key: key);\n\n  @override\n  State<OfferCodeScreen> createState() => _OfferCodeScreenState();\n}\n\nclass _OfferCodeScreenState extends State<OfferCodeScreen> {\n  final _iap = FlutterInappPurchase.instance;\n  StreamSubscription<Purchase>? _purchaseSubscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _setupPurchaseListener();\n  }\n\n  @override\n  void dispose() {\n    _purchaseSubscription?.cancel();\n    super.dispose();\n  }\n\n  void _setupPurchaseListener() {\n    _purchaseSubscription = _iap.purchaseUpdatedListener.listen(\n      (purchase) {\n        print('Purchase updated after redemption: ${purchase.productId}');\n        // Handle the new purchase/subscription\n        _handlePurchase(purchase);\n      },\n    );\n  }\n\n  Future<void> _handlePurchase(Purchase purchase) async {\n    // Validate and process the purchase\n    await _iap.finishTransaction(\n      purchase: purchase,\n      isConsumable: false,\n    );\n  }\n\n  Future<void> handleRedeemCode() async {\n    try {\n      if (Platform.isIOS) {\n        // Present native iOS redemption sheet\n        await _iap.presentCodeRedemptionSheetIOS();\n        print('Redemption sheet presented');\n      } else if (Platform.isAndroid) {\n        // Open Play Store for Android\n        await _iap.deepLinkToSubscriptions();\n      }\n    } catch (error) {\n      print('Error redeeming code: $error');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Redeem Offer Code'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: handleRedeemCode,\n          child: Text(\n            Platform.isIOS ? 'Redeem Offer Code' : 'Manage Subscriptions',\n          ),\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Experience"}),": Clearly communicate to users where they can find and how to use offer codes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Always wrap redemption calls in try-catch blocks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Platform Detection"}),": Use platform-specific methods appropriately"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purchase Validation"}),": Always validate purchases on your server after redemption"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.h3,{id:"ios-testing",children:"iOS Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Offer codes can only be tested on real devices"}),"\n",(0,t.jsx)(n.li,{children:"Use TestFlight or App Store Connect to generate test codes"}),"\n",(0,t.jsx)(n.li,{children:"Sandbox environment supports offer code testing"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"android-testing",children:"Android Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Test with promo codes generated in Google Play Console"}),"\n",(0,t.jsx)(n.li,{children:"Ensure your app is properly configured for in-app purchases"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"ios-issues",children:"iOS Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"Not available on simulator"'}),": Use a real device for testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sheet doesn't appear"}),": Ensure StoreKit is properly configured"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User cancellation"}),": This is normal behavior and doesn't throw an error"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"android-issues",children:"Android Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Play Store doesn't open"}),": Check if Play Store is installed and updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Invalid code"}),": Verify the code format and validity in Play Console"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./subscription-offers",children:"Subscription Offers"})," - Handle subscription purchases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./error-handling",children:"Error Handling"})," - Handle redemption errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Debug issues"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);