"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7653],{8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>t});var s=n(6540);const a={},o=s.createContext(a);function i(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:r},e.children)}},9624:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/error-handling","title":"Error Handling","description":"This guide covers best practices for handling errors in your flutterinapppurchase implementation.","source":"@site/docs/guides/error-handling.md","sourceDirName":"guides","slug":"/guides/error-handling","permalink":"/flutter_inapp_purchase/docs/guides/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/guides/error-handling.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Error Handling"},"sidebar":"docsSidebar","previous":{"title":"Alternative Billing","permalink":"/flutter_inapp_purchase/docs/guides/alternative-billing"},"next":{"title":"Troubleshooting","permalink":"/flutter_inapp_purchase/docs/guides/troubleshooting"}}');var a=n(4848),o=n(8453);const i={sidebar_position:6,title:"Error Handling"},t="Error Handling",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Error Structure",id:"error-structure",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:2},{value:"Network Errors",id:"network-errors",level:3},{value:"User Cancellation",id:"user-cancellation",level:3},{value:"Payment Issues",id:"payment-issues",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:2},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Logging and Analytics",id:"logging-and-analytics",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Handle Errors",id:"1-always-handle-errors",level:3},{value:"2. Provide User-Friendly Messages",id:"2-provide-user-friendly-messages",level:3},{value:"3. Handle Platform Differences",id:"3-handle-platform-differences",level:3},{value:"4. Set Up Listeners Early",id:"4-set-up-listeners-early",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,a.jsx)(r.p,{children:"This guide covers best practices for handling errors in your flutter_inapp_purchase implementation."}),"\n",(0,a.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(r.p,{children:["flutter_inapp_purchase provides comprehensive error handling through standardized error codes and messages. All errors are returned as structured ",(0,a.jsx)(r.code,{children:"PurchaseError"})," objects with consistent properties across iOS and Android platforms."]}),"\n",(0,a.jsxs)(r.p,{children:["For a complete list of error codes, see ",(0,a.jsx)(r.a,{href:"../api/error-codes",children:"Error Codes"}),"."]}),"\n",(0,a.jsx)(r.h2,{id:"error-structure",children:"Error Structure"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"class PurchaseError {\n  final String name;\n  final String message;\n  final int? responseCode;\n  final String? debugMessage;\n  final ErrorCode? code;\n  final String? productId;\n  final IapPlatform? platform;\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,a.jsx)(r.h3,{id:"network-errors",children:"Network Errors"}),"\n",(0,a.jsx)(r.p,{children:"Handle network connectivity issues gracefully:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"final _iap = FlutterInappPurchase.instance;\nStreamSubscription<PurchaseError>? _errorSubscription;\n\nvoid setupErrorListener() {\n  _errorSubscription = _iap.purchaseErrorListener.listen((error) {\n    if (error.code == ErrorCode.NetworkError) {\n      // Handle network issues\n      showRetryDialog('Please check your internet connection');\n    }\n  });\n}\n\n@override\nvoid dispose() {\n  _errorSubscription?.cancel();\n  super.dispose();\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"user-cancellation",children:"User Cancellation"}),"\n",(0,a.jsx)(r.p,{children:"Gracefully handle when users cancel purchases:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"void setupErrorListener() {\n  _iap.purchaseErrorListener.listen((error) {\n    if (error.code == ErrorCode.UserCancelled) {\n      // User cancelled the purchase\n      // Don't show error message, just continue\n      debugPrint('User cancelled purchase');\n      return;\n    }\n  });\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"payment-issues",children:"Payment Issues"}),"\n",(0,a.jsx)(r.p,{children:"Handle various payment-related errors:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"void setupErrorListener() {\n  _iap.purchaseErrorListener.listen((error) {\n    switch (error.code) {\n      case ErrorCode.DeveloperError:\n        showMessage('Invalid payment method. Please check your payment settings.');\n        break;\n      case ErrorCode.ItemUnavailable:\n        showMessage('This item is not available.');\n        break;\n      case ErrorCode.AlreadyOwned:\n        showMessage('You already own this item.');\n        break;\n      case ErrorCode.Unknown:\n      default:\n        showMessage('Purchase failed. Please try again.');\n    }\n  });\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,a.jsx)(r.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,a.jsx)(r.p,{children:"Implement exponential backoff for transient errors:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"Future<T> retryWithBackoff<T>(\n  Future<T> Function() operation, {\n  int maxRetries = 3,\n}) async {\n  for (int attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (attempt == maxRetries - 1) rethrow;\n\n      // Only retry on network or service errors\n      if (error is PurchaseError &&\n          [ErrorCode.NetworkError, ErrorCode.ServiceError].contains(error.code)) {\n        final delaySeconds = math.pow(2, attempt).toInt();\n        await Future.delayed(Duration(seconds: delaySeconds));\n      } else {\n        rethrow;\n      }\n    }\n  }\n  throw Exception('Max retries exceeded');\n}\n\n// Usage\ntry {\n  final products = await retryWithBackoff(() => iap.fetchProducts(\n    skus: productIds,\n    type: ProductQueryType.inApp,\n  ));\n} catch (error) {\n  debugPrint('Failed after retries: $error');\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,a.jsx)(r.p,{children:"Provide fallback experiences:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"Future<void> handlePurchase(String productId) async {\n  try {\n    await _iap.requestPurchase(\n      RequestPurchaseProps.inApp((\n        ios: RequestPurchaseIosProps(sku: productId),\n        android: RequestPurchaseAndroidProps(skus: [productId]),\n        useAlternativeBilling: null,\n      )),\n    );\n  } on PurchaseError catch (error) {\n    if (error.code == ErrorCode.IapNotAvailable) {\n      // Redirect to web subscription\n      await redirectToWebPurchase(productId);\n    } else {\n      showErrorMessage(error.message);\n    }\n  } catch (error) {\n    showErrorMessage('An unexpected error occurred');\n  }\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"logging-and-analytics",children:"Logging and Analytics"}),"\n",(0,a.jsx)(r.p,{children:"Track errors for debugging and analytics:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"void trackError(PurchaseError error, String context) {\n  debugPrint('IAP Error in $context: ${error.message}');\n\n  // Send to analytics\n  analytics.logEvent(\n    name: 'iap_error',\n    parameters: {\n      'error_code': error.code?.name ?? 'unknown',\n      'error_message': error.message,\n      'context': context,\n      'platform': Platform.isIOS ? 'ios' : 'android',\n      'product_id': error.productId,\n    },\n  );\n}\n\n// Usage\n_iap.purchaseErrorListener.listen((error) {\n  trackError(error, 'purchase_flow');\n  handlePurchaseError(error);\n});\n"})}),"\n",(0,a.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(r.h3,{id:"1-always-handle-errors",children:"1. Always Handle Errors"}),"\n",(0,a.jsx)(r.p,{children:"Never leave IAP operations without error handling:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"// \u274c Bad\niap.requestPurchase(sku: productId);\n\n// \u2705 Good\ntry {\n  await iap.requestPurchase(sku: productId);\n} catch (error) {\n  handlePurchaseError(error);\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"2-provide-user-friendly-messages",children:"2. Provide User-Friendly Messages"}),"\n",(0,a.jsx)(r.p,{children:"Convert technical errors to user-friendly messages:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"String getUserFriendlyMessage(PurchaseError error) {\n  switch (error.code) {\n    case ErrorCode.UserCancelled:\n      return ''; // Don't show message\n    case ErrorCode.NetworkError:\n      return 'Please check your internet connection and try again.';\n    case ErrorCode.ItemUnavailable:\n      return 'This item is currently unavailable.';\n    case ErrorCode.AlreadyOwned:\n      return 'You already own this item.';\n    case ErrorCode.DeveloperError:\n      return 'There was an issue with your payment method.';\n    default:\n      return 'Something went wrong. Please try again later.';\n  }\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"3-handle-platform-differences",children:"3. Handle Platform Differences"}),"\n",(0,a.jsx)(r.p,{children:"Some errors may be platform-specific:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"void handlePlatformSpecificError(PurchaseError error) {\n  if (Platform.isIOS && error.code == ErrorCode.ItemUnavailable) {\n    showMessage('This product is not available in your country.');\n  } else if (Platform.isAndroid && error.code == ErrorCode.DeveloperError) {\n    // Log for debugging but don't show to user\n    debugPrint('Google Play configuration error: ${error.debugMessage}');\n    showMessage('Please try again later.');\n  }\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"4-set-up-listeners-early",children:"4. Set Up Listeners Early"}),"\n",(0,a.jsx)(r.p,{children:"Initialize error listeners before making any IAP calls:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"class PurchaseManager {\n  final _iap = FlutterInappPurchase.instance;\n  StreamSubscription<PurchaseError>? _errorSubscription;\n\n  Future<void> initialize() async {\n    // Set up error listener first\n    _errorSubscription = _iap.purchaseErrorListener.listen(handleError);\n\n    // Then initialize connection\n    await _iap.initConnection();\n  }\n\n  void handleError(PurchaseError error) {\n    final message = getUserFriendlyMessage(error);\n    if (message.isNotEmpty) {\n      showMessage(message);\n    }\n    trackError(error, 'purchase_manager');\n  }\n\n  void dispose() {\n    _errorSubscription?.cancel();\n  }\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-dart",children:"class PurchaseHandler {\n  final _iap = FlutterInappPurchase.instance;\n  StreamSubscription<Purchase>? _purchaseSubscription;\n  StreamSubscription<PurchaseError>? _errorSubscription;\n\n  Future<void> initialize() async {\n    // Set up listeners\n    _purchaseSubscription = _iap.purchaseUpdatedListener.listen(_handlePurchase);\n    _errorSubscription = _iap.purchaseErrorListener.listen(_handleError);\n\n    // Initialize connection\n    await _iap.initConnection();\n  }\n\n  void _handlePurchase(Purchase purchase) {\n    debugPrint('Purchase success: ${purchase.productId}');\n    // Process purchase\n  }\n\n  void _handleError(PurchaseError error) {\n    debugPrint('Purchase error: ${error.code?.name} - ${error.message}');\n\n    // Track error\n    trackError(error, 'purchase_handler');\n\n    // Show user-friendly message\n    final message = getUserFriendlyMessage(error);\n    if (message.isNotEmpty) {\n      showMessage(message);\n    }\n  }\n\n  String getUserFriendlyMessage(PurchaseError error) {\n    switch (error.code) {\n      case ErrorCode.UserCancelled:\n        return '';\n      case ErrorCode.NetworkError:\n        return 'Please check your internet connection';\n      case ErrorCode.ItemUnavailable:\n        return 'This item is unavailable';\n      case ErrorCode.AlreadyOwned:\n        return 'You already own this item';\n      default:\n        return 'Purchase failed. Please try again.';\n    }\n  }\n\n  void dispose() {\n    _purchaseSubscription?.cancel();\n    _errorSubscription?.cancel();\n  }\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"../api/error-codes",children:"Error Codes"})," - Complete error code reference"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"./purchases",children:"Purchases"})," - Purchase implementation guide"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);