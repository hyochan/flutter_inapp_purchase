"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7280],{5931:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"examples/subscription-flow","title":"Subscription Flow","description":"Source Code: subscriptionflowscreen.dart","source":"@site/docs/examples/subscription-flow.md","sourceDirName":"examples","slug":"/examples/subscription-flow","permalink":"/flutter_inapp_purchase/docs/examples/subscription-flow","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/examples/subscription-flow.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Purchase Flow","permalink":"/flutter_inapp_purchase/docs/examples/purchase-flow"},"next":{"title":"Available Purchases","permalink":"/flutter_inapp_purchase/docs/examples/available-purchases"}}');var i=n(4848),t=n(8453);const c={sidebar_position:2},a="Subscription Flow",o={},u=[{value:"Key Features",id:"key-features",level:2},{value:"Implementation Overview",id:"implementation-overview",level:2},{value:"1. Set Up Listeners",id:"1-set-up-listeners",level:3},{value:"2. Fetch Subscription Products",id:"2-fetch-subscription-products",level:3},{value:"3. Check Active Subscriptions",id:"3-check-active-subscriptions",level:3},{value:"4. Purchase Subscription",id:"4-purchase-subscription",level:3},{value:"5. Upgrade/Downgrade Subscription (Android)",id:"5-upgradedowngrade-subscription-android",level:3},{value:"Android Replacement Modes",id:"android-replacement-modes",level:2},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"subscription-flow",children:"Subscription Flow"})}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Source Code"}),": ",(0,i.jsx)(s.a,{href:"https://github.com/hyochan/flutter_inapp_purchase/blob/main/example/lib/src/screens/subscription_flow_screen.dart",children:"subscription_flow_screen.dart"})]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"This example demonstrates how to implement subscription purchases with support for upgrades, downgrades, and subscription management."}),"\n",(0,i.jsx)(s.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Fetch subscription products"}),"\n",(0,i.jsx)(s.li,{children:"Handle subscription purchases"}),"\n",(0,i.jsx)(s.li,{children:"Check active subscriptions"}),"\n",(0,i.jsx)(s.li,{children:"Manage subscription upgrades/downgrades (Android)"}),"\n",(0,i.jsx)(s.li,{children:"Listen to subscription events"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"implementation-overview",children:"Implementation Overview"}),"\n",(0,i.jsx)(s.h3,{id:"1-set-up-listeners",children:"1. Set Up Listeners"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"StreamSubscription<Purchase>? _purchaseUpdatedSubscription;\nStreamSubscription<PurchaseError>? _purchaseErrorSubscription;\n\nvoid _setupListeners() {\n  _purchaseUpdatedSubscription = iap.purchaseUpdatedListener.listen(\n    (purchase) {\n      _handlePurchase(purchase);\n    },\n  );\n\n  _purchaseErrorSubscription = iap.purchaseErrorListener.listen(\n    (error) {\n      _handleError(error);\n    },\n  );\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"2-fetch-subscription-products",children:"2. Fetch Subscription Products"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"final result = await iap.fetchProducts(\n  ProductRequest(\n    skus: ['monthly_sub', 'yearly_sub'],\n    type: ProductQueryType.Subs,\n  ),\n);\n\nif (result is FetchProductsResultSubscriptions) {\n  final subscriptions = result.value ?? [];\n  for (final product in subscriptions) {\n    if (product is ProductSubscriptionIOS) {\n      debugPrint('iOS Subscription: ${product.displayName}');\n    } else if (product is ProductSubscriptionAndroid) {\n      debugPrint('Android Subscription: ${product.title}');\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"3-check-active-subscriptions",children:"3. Check Active Subscriptions"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"// Lightweight check - returns only subscription IDs and expiry dates\nfinal summaries = await iap.getActiveSubscriptions(['monthly_sub']);\nif (summaries.isNotEmpty) {\n  debugPrint('Active subscription: ${summaries.first.productId}');\n  debugPrint('Expires: ${summaries.first.expirationDateIOS}');\n}\n\n// Detailed check - returns full purchase objects\nfinal purchases = await iap.getAvailablePurchases(\n  PurchaseOptions(onlyIncludeActiveItemsIOS: true),\n);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"4-purchase-subscription",children:"4. Purchase Subscription"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"await iap.requestPurchase(\n  RequestPurchaseProps.subs((\n    ios: RequestPurchaseIosProps(\n      sku: 'monthly_sub',\n      quantity: 1,\n    ),\n    android: RequestPurchaseAndroidProps(\n      skus: ['monthly_sub'],\n    ),\n    useAlternativeBilling: null,\n  )),\n);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"5-upgradedowngrade-subscription-android",children:"5. Upgrade/Downgrade Subscription (Android)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"await iap.requestPurchase(\n  RequestPurchaseProps.subs((\n    ios: RequestPurchaseIosProps(\n      sku: 'yearly_sub',\n      quantity: 1,\n    ),\n    android: RequestPurchaseAndroidProps(\n      skus: ['yearly_sub'],\n      replacementModeAndroid: AndroidReplacementMode.withTimeProration,\n    ),\n    useAlternativeBilling: null,\n  )),\n);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"android-replacement-modes",children:"Android Replacement Modes"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-dart",children:"enum AndroidReplacementMode {\n  withTimeProration,      // 1: Credit unused time towards new subscription\n  chargeProratedPrice,    // 2: Charge prorated price immediately\n  withoutProration,       // 3: No credit for unused time\n  deferred,               // 4: New subscription starts at next renewal\n  chargeFullPrice,        // 5: Charge full price immediately\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Use lightweight checks"})," - Use ",(0,i.jsx)(s.code,{children:"getActiveSubscriptions()"})," for quick status checks"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Verify server-side"})," - Always validate subscription status on your backend"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Handle upgrades properly"})," - Choose appropriate replacement mode for Android"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Check subscription status"})," - Regularly verify subscription validity"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Handle expiration"})," - Monitor subscription expiry dates and renewal status"]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var r=n(6540);const i={},t=r.createContext(i);function c(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);