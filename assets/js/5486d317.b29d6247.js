"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[9485],{7589:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/faq","title":"FAQ","description":"Common questions and answers about flutterinapppurchase v7.0, covering implementation, platform differences, best practices, and troubleshooting.","source":"@site/versioned_docs/version-7.0/guides/faq.md","sourceDirName":"guides","slug":"/guides/faq","permalink":"/flutter_inapp_purchase/docs/7.0/guides/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-7.0/guides/faq.md","tags":[],"version":"7.0","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"FAQ"}}');var i=r(4848),a=r(8453);const t={sidebar_position:9,title:"FAQ"},o="Frequently Asked Questions",c={},d=[{value:"General Questions",id:"general-questions",level:2},{value:"What is flutter_inapp_purchase?",id:"what-is-flutter_inapp_purchase",level:3},{value:"Which platforms are supported?",id:"which-platforms-are-supported",level:3},{value:"What&#39;s new in v7.0?",id:"whats-new-in-v70",level:3},{value:"Implementation Questions",id:"implementation-questions",level:2},{value:"How do I get started?",id:"how-do-i-get-started",level:3},{value:"How do I handle different product types?",id:"how-do-i-handle-different-product-types",level:3},{value:"How do I restore purchases?",id:"how-do-i-restore-purchases",level:3},{value:"How do I validate receipts?",id:"how-do-i-validate-receipts",level:3},{value:"Platform Differences",id:"platform-differences",level:2},{value:"What are the key differences between iOS and Android?",id:"what-are-the-key-differences-between-ios-and-android",level:3},{value:"How do I handle platform-specific features?",id:"how-do-i-handle-platform-specific-features",level:3},{value:"Do I need different product IDs for each platform?",id:"do-i-need-different-product-ids-for-each-platform",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Why are my products not loading?",id:"why-are-my-products-not-loading",level:3},{value:"Why do purchases fail silently?",id:"why-do-purchases-fail-silently",level:3},{value:"I see both success and error for one subscription purchase",id:"i-see-both-success-and-error-for-one-subscription-purchase",level:3},{value:"How do I handle common error codes?",id:"how-do-i-handle-common-error-codes",level:3},{value:"How do I handle stuck transactions?",id:"how-do-i-handle-stuck-transactions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"What are the key best practices?",id:"what-are-the-key-best-practices",level:3},{value:"Additional Resources",id:"additional-resources",level:2},{value:"Where can I find more help?",id:"where-can-i-find-more-help",level:3},{value:"Related Guides",id:"related-guides",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"frequently-asked-questions",children:"Frequently Asked Questions"})}),"\n",(0,i.jsx)(n.p,{children:"Common questions and answers about flutter_inapp_purchase v7.0, covering implementation, platform differences, best practices, and troubleshooting."}),"\n",(0,i.jsx)(n.h2,{id:"general-questions",children:"General Questions"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-flutter_inapp_purchase",children:"What is flutter_inapp_purchase?"}),"\n",(0,i.jsxs)(n.p,{children:["flutter_inapp_purchase is a Flutter plugin that provides a unified API for implementing in-app purchases across iOS and Android platforms. It follows the ",(0,i.jsx)(n.a,{href:"https://openiap.dev",children:"OpenIAP specification"})," and supports:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consumable products (coins, gems, lives)"}),"\n",(0,i.jsx)(n.li,{children:"Non-consumable products (premium features, ad removal)"}),"\n",(0,i.jsx)(n.li,{children:"Auto-renewable subscriptions"}),"\n",(0,i.jsx)(n.li,{children:"Subscription offers and promotional codes"}),"\n",(0,i.jsx)(n.li,{children:"Receipt validation"}),"\n",(0,i.jsx)(n.li,{children:"Purchase restoration"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"which-platforms-are-supported",children:"Which platforms are supported?"}),"\n",(0,i.jsx)(n.p,{children:"Currently supported platforms:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"})," (12.0+) - Uses StoreKit 2 (iOS 15.0+) with fallback to StoreKit 1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"})," (minSdkVersion 21) - Uses Google Play Billing Library v6+"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"whats-new-in-v70",children:"What's new in v7.0?"}),"\n",(0,i.jsx)(n.p,{children:"Major changes in v7.0:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Named parameters API\nfinal products = await iap.fetchProducts(\n  skus: ['product_id'],\n  type: ProductQueryType.InApp,\n);\n\n// Simplified finishTransaction\nawait iap.finishTransaction(\n  purchase: purchase,\n  isConsumable: true,\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Key improvements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Named parameters"})," - All methods now use named parameters for clearer API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplified finishTransaction"})," - Pass Purchase object directly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better OpenIAP alignment"})," - Closer adherence to OpenIAP specification"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Removed deprecated iOS methods"})," - Use standard methods instead"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"../migration/from-v6",children:"Migration Guide"})," for details."]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-questions",children:"Implementation Questions"}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-get-started",children:"How do I get started?"}),"\n",(0,i.jsx)(n.p,{children:"Basic implementation steps:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// 1. Import the package\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\n// 2. Initialize connection\nfinal iap = FlutterInappPurchase.instance;\nawait iap.initConnection();\n\n// 3. Set up listeners\nStreamSubscription? _purchaseUpdatedSubscription;\nStreamSubscription? _purchaseErrorSubscription;\n\n_purchaseUpdatedSubscription = iap.purchaseUpdatedListener.listen(\n  (purchase) {\n    debugPrint('Purchase received: ${purchase.productId}');\n    _handlePurchase(purchase);\n  },\n);\n\n_purchaseErrorSubscription = iap.purchaseErrorListener.listen(\n  (error) {\n    debugPrint('Purchase error: ${error.message}');\n    _handleError(error);\n  },\n);\n\n// 4. Load products\nfinal products = await iap.fetchProducts(\n  skus: ['product_id_1', 'product_id_2'],\n  type: ProductQueryType.InApp,\n);\n\n// 5. Request purchase\nawait iap.requestPurchase(sku: 'product_id');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-handle-different-product-types",children:"How do I handle different product types?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final iap = FlutterInappPurchase.instance;\n\n// Consumable products (coins, gems)\nawait iap.requestPurchase(sku: 'consumable_product');\n\n// In purchase handler:\nawait iap.finishTransaction(\n  purchase: purchase,\n  isConsumable: true, // Consumes on Android, finishes on iOS\n);\n\n// Non-consumable products (premium features)\n// Check if already owned first\nfinal purchases = await iap.getAvailablePurchases();\nfinal alreadyOwned = purchases.any((p) => p.productId == 'non_consumable');\n\nif (!alreadyOwned) {\n  await iap.requestPurchase(sku: 'non_consumable');\n\n  // In purchase handler:\n  await iap.finishTransaction(\n    purchase: purchase,\n    isConsumable: false, // Acknowledges on Android, finishes on iOS\n  );\n}\n\n// Subscriptions\nawait iap.requestPurchase(\n  RequestPurchaseProps.subs(\n    request: RequestPurchasePropsByPlatforms(\n      ios: RequestPurchaseIosProps(sku: 'subscription_id'),\n      android: RequestPurchaseAndroidProps(skus: ['subscription_id']),\n    ),\n  ),\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-restore-purchases",children:"How do I restore purchases?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> restorePurchases() async {\n  try {\n    final purchases = await iap.getAvailablePurchases();\n\n    if (purchases.isNotEmpty) {\n      debugPrint('Restored ${purchases.length} purchases');\n\n      for (final purchase in purchases) {\n        // Deliver content for each restored purchase\n        await deliverContent(purchase.productId);\n      }\n    } else {\n      debugPrint('No purchases to restore');\n    }\n  } catch (e) {\n    debugPrint('Restore failed: $e');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-validate-receipts",children:"How do I validate receipts?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Always validate purchases server-side"})," for security:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> _handlePurchase(Purchase purchase) async {\n  // 1. Verify on your server\n  final isValid = await verifyPurchaseOnServer(purchase);\n\n  if (!isValid) {\n    debugPrint('Invalid purchase');\n    return;\n  }\n\n  // 2. Deliver content\n  await deliverContent(purchase.productId);\n\n  // 3. Finish transaction\n  await iap.finishTransaction(\n    purchase: purchase,\n    isConsumable: true, // or false for non-consumables\n  );\n}\n\nFuture<bool> verifyPurchaseOnServer(Purchase purchase) async {\n  try {\n    final response = await http.post(\n      Uri.parse('https://your-server.com/verify-purchase'),\n      headers: {'Content-Type': 'application/json'},\n      body: jsonEncode({\n        'platform': Platform.isIOS ? 'ios' : 'android',\n        'productId': purchase.productId,\n        'transactionReceipt': purchase.transactionReceipt, // iOS\n        'purchaseToken': purchase.purchaseToken, // Android\n      }),\n    );\n\n    return response.statusCode == 200;\n  } catch (e) {\n    debugPrint('Verification failed: $e');\n    return false;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"platform-differences",children:"Platform Differences"}),"\n",(0,i.jsx)(n.h3,{id:"what-are-the-key-differences-between-ios-and-android",children:"What are the key differences between iOS and Android?"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"iOS"}),(0,i.jsx)(n.th,{children:"Android"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Receipt Format"}),(0,i.jsx)(n.td,{children:"Base64 encoded receipt"}),(0,i.jsx)(n.td,{children:"Purchase token"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Pending Purchases"}),(0,i.jsx)(n.td,{children:"Not supported"}),(0,i.jsx)(n.td,{children:"Supported (purchaseStateAndroid = 2)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Offer Codes"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"presentCodeRedemptionSheetIOS()"})}),(0,i.jsx)(n.td,{children:"Not supported"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Subscription Upgrades"}),(0,i.jsx)(n.td,{children:"Automatic handling"}),(0,i.jsxs)(n.td,{children:["Use ",(0,i.jsx)(n.code,{children:"replacementModeAndroid"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Transaction Finishing"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"finishTransaction()"})," finishes"]}),(0,i.jsxs)(n.td,{children:["Consumes or acknowledges based on ",(0,i.jsx)(n.code,{children:"isConsumable"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Sandbox Testing"}),(0,i.jsx)(n.td,{children:"Sandbox accounts"}),(0,i.jsx)(n.td,{children:"Test accounts & license testers"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-handle-platform-specific-features",children:"How do I handle platform-specific features?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// iOS-specific: Offer code redemption\nif (Platform.isIOS) {\n  await iap.presentCodeRedemptionSheetIOS();\n}\n\n// iOS-specific: Check introductory offer eligibility\nif (Platform.isIOS) {\n  final eligible = await iap.isEligibleForIntroOfferIOS('subscription_id');\n  debugPrint('Eligible for intro offer: $eligible');\n}\n\n// Android-specific: Handle pending purchases\niap.purchaseUpdatedListener.listen((purchase) {\n  if (Platform.isAndroid && purchase.purchaseStateAndroid == 2) {\n    debugPrint('Purchase pending: ${purchase.productId}');\n    // Show pending UI\n  } else {\n    _handlePurchase(purchase);\n  }\n});\n\n// Android-specific: Subscription upgrade/downgrade\nif (Platform.isAndroid) {\n  await iap.requestPurchase(\n    RequestPurchaseProps.subs(\n      request: RequestPurchasePropsByPlatforms(\n        android: RequestPurchaseAndroidProps(\n          skus: ['new_subscription'],\n          oldSkuAndroid: 'old_subscription',\n          purchaseTokenAndroid: oldPurchaseToken,\n          replacementModeAndroid: AndroidReplacementMode.withTimeProration.value,\n        ),\n      ),\n    ),\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"do-i-need-different-product-ids-for-each-platform",children:"Do I need different product IDs for each platform?"}),"\n",(0,i.jsx)(n.p,{children:"Yes, typically you'll have different product IDs configured in App Store Connect and Google Play Console:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class ProductConfig {\n  // Platform-specific product IDs\n  static const productIds = {\n    'premium': Platform.isIOS ? 'com.app.premium.ios' : 'com.app.premium.android',\n    'coins_100': Platform.isIOS ? 'com.app.coins100.ios' : 'com.app.coins100.android',\n  };\n\n  // Or use a mapping approach\n  static String getProductId(String key) {\n    const iosIds = {\n      'premium': 'com.app.premium.ios',\n      'coins_100': 'com.app.coins100.ios',\n    };\n\n    const androidIds = {\n      'premium': 'com.app.premium.android',\n      'coins_100': 'com.app.coins100.android',\n    };\n\n    return Platform.isIOS ? iosIds[key]! : androidIds[key]!;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"why-are-my-products-not-loading",children:"Why are my products not loading?"}),"\n",(0,i.jsx)(n.p,{children:"Common causes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),': Products not "Ready to Submit" in App Store Connect']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"iOS"}),": Banking/tax information incomplete"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": App not published (even to internal testing)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Android"}),": Signed APK/AAB not uploaded"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Both"}),": Product IDs don't match exactly"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Debug product loading\ntry {\n  final products = await iap.fetchProducts(\n    skus: ['your_product_id'],\n    type: ProductQueryType.InApp,\n  );\n\n  if (products.isEmpty) {\n    debugPrint('No products loaded - check product IDs and store setup');\n  } else {\n    debugPrint('Loaded ${products.length} products');\n  }\n} catch (e) {\n  debugPrint('Product loading error: $e');\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"why-do-purchases-fail-silently",children:"Why do purchases fail silently?"}),"\n",(0,i.jsx)(n.p,{children:"Always listen to both purchase streams:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// \u2705 Correct: Listen to both streams\n_purchaseUpdatedSubscription = iap.purchaseUpdatedListener.listen((purchase) {\n  debugPrint('Purchase success: ${purchase.productId}');\n  _handlePurchase(purchase);\n});\n\n_purchaseErrorSubscription = iap.purchaseErrorListener.listen((error) {\n  debugPrint('Purchase error: ${error.code} - ${error.message}');\n  _handleError(error);\n});\n\n// Don't forget to cancel subscriptions\n@override\nvoid dispose() {\n  _purchaseUpdatedSubscription?.cancel();\n  _purchaseErrorSubscription?.cancel();\n  super.dispose();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"i-see-both-success-and-error-for-one-subscription-purchase",children:"I see both success and error for one subscription purchase"}),"\n",(0,i.jsx)(n.p,{children:"This can happen on iOS due to StoreKit 2 event timing. If you already processed a success, you can safely ignore a subsequent transient error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class PurchaseDeduper {\n  int _lastSuccessMs = 0;\n\n  void setupListeners() {\n    iap.purchaseUpdatedListener.listen((purchase) async {\n      _lastSuccessMs = DateTime.now().millisecondsSinceEpoch;\n      await iap.finishTransaction(purchase: purchase, isConsumable: false);\n    });\n\n    iap.purchaseErrorListener.listen((error) {\n      // Ignore user cancellation\n      if (error.code == ErrorCode.userCancelled) return;\n\n      // Ignore spurious errors that follow success within 1.5s\n      final now = DateTime.now().millisecondsSinceEpoch;\n      final timeSinceSuccess = now - _lastSuccessMs;\n      if (timeSinceSuccess >= 0 && timeSinceSuccess < 1500) {\n        debugPrint('Ignoring spurious error after success');\n        return;\n      }\n\n      // Handle real errors\n      _handleError(error);\n    });\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important"}),": ",(0,i.jsx)(n.code,{children:"requestPurchase()"})," is event-driven, not promise-based. Don't rely on ",(0,i.jsx)(n.code,{children:"await requestPurchase()"})," for the final status\u2014handle results via listeners."]}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-handle-common-error-codes",children:"How do I handle common error codes?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void _handleError(PurchaseError error) {\n  switch (error.code) {\n    case ErrorCode.userCancelled:\n      // Don't show error - user intentionally cancelled\n      debugPrint('User cancelled purchase');\n      break;\n\n    case ErrorCode.networkError:\n      _showMessage('Network error. Please check your connection and try again.');\n      break;\n\n    case ErrorCode.itemAlreadyOwned:\n      _showMessage('You already own this item.');\n      // Suggest restore purchases\n      break;\n\n    case ErrorCode.itemUnavailable:\n      _showMessage('This item is currently unavailable.');\n      break;\n\n    default:\n      _showMessage('Purchase failed: ${error.message}');\n      debugPrint('Error code: ${error.code}');\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-handle-stuck-transactions",children:"How do I handle stuck transactions?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> clearStuckTransactions() async {\n  final purchases = await iap.getAvailablePurchases();\n\n  for (final purchase in purchases) {\n    // Verify and deliver content\n    final isValid = await verifyPurchaseOnServer(purchase);\n\n    if (isValid) {\n      await deliverContent(purchase.productId);\n    }\n\n    // Finish transaction\n    await iap.finishTransaction(\n      purchase: purchase,\n      isConsumable: false, // Adjust based on product type\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"what-are-the-key-best-practices",children:"What are the key best practices?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always set up listeners first"})," before making purchase requests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate purchases server-side"})," for security"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Use correct ",(0,i.jsx)(n.code,{children:"isConsumable"})," flag"]})," - it handles consume/acknowledge automatically"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle errors gracefully"})," with proper error codes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"})," in sandbox/test environments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialize connection early"})," in app lifecycle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cancel subscriptions"})," in dispose to prevent memory leaks"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class BestPracticeExample extends StatefulWidget {\n  @override\n  State<BestPracticeExample> createState() => _BestPracticeExampleState();\n}\n\nclass _BestPracticeExampleState extends State<BestPracticeExample> {\n  final _iap = FlutterInappPurchase.instance;\n  StreamSubscription? _purchaseUpdatedSubscription;\n  StreamSubscription? _purchaseErrorSubscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _initializeIAP();\n  }\n\n  Future<void> _initializeIAP() async {\n    // 1. Initialize connection early\n    await _iap.initConnection();\n\n    // 2. Set up listeners before any purchase requests\n    _purchaseUpdatedSubscription = _iap.purchaseUpdatedListener.listen(\n      (purchase) async {\n        // 3. Always verify server-side\n        final isValid = await verifyPurchaseOnServer(purchase);\n        if (!isValid) return;\n\n        await deliverContent(purchase.productId);\n\n        // 4. Use correct isConsumable flag\n        await _iap.finishTransaction(\n          purchase: purchase,\n          isConsumable: true,\n        );\n      },\n    );\n\n    _purchaseErrorSubscription = _iap.purchaseErrorListener.listen(\n      (error) {\n        // 5. Handle errors gracefully\n        _handleError(error);\n      },\n    );\n  }\n\n  @override\n  void dispose() {\n    // 7. Cancel subscriptions\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n    super.dispose();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsx)(n.h3,{id:"where-can-i-find-more-help",children:"Where can I find more help?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": ",(0,i.jsx)(n.a,{href:"https://flutter-inapp-purchase.dooboolab.com",children:"flutter_inapp_purchase docs"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Examples"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/dooboolab-community/flutter_inapp_purchase/tree/main/example",children:"GitHub Repository"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Issues"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/dooboolab-community/flutter_inapp_purchase/issues",children:"GitHub Issues"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenIAP Spec"}),": ",(0,i.jsx)(n.a,{href:"https://openiap.dev",children:"openiap.dev"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"related-guides",children:"Related Guides"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./lifecycle",children:"Purchase Lifecycle"})," - Understand the full purchase flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./subscription-validation",children:"Subscription Validation"})," - Validate subscriptions properly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./error-handling",children:"Error Handling"})," - Handle errors comprehensively"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./troubleshooting",children:"Troubleshooting"})," - Common issues and solutions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);