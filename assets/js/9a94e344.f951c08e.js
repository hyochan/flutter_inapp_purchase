"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[9910],{227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var i=t(5086),r=t(4848),s=t(8453);const a={slug:"7.1.0-release",title:"Release 7.1.0 - Simplified API with Direct List Returns",authors:["hyochan"],tags:["release","flutter","in-app-purchase","breaking-change","type-inference"],date:new Date("2025-10-07T00:00:00.000Z")},c=void 0,l={authorsImageUrls:[void 0]},o=[{value:"Highlights",id:"highlights",level:2},{value:"Simplified fetchProducts API",id:"simplified-fetchproducts-api",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Type Annotations",id:"type-annotations",level:3},{value:"Migration from 7.0",id:"migration-from-70",level:3},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"fetchProducts Return Type",id:"fetchproducts-return-type",level:3},{value:"Required Changes",id:"required-changes",level:3},{value:"Full Example",id:"full-example",level:2},{value:"Why This Change?",id:"why-this-change",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Credits",id:"credits",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Release 7.1.0 simplifies the ",(0,r.jsx)(n.code,{children:"fetchProducts()"})," API by returning lists directly instead of union types, making it easier to work with products while maintaining type safety through explicit type annotations."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/hyochan/flutter_inapp_purchase/releases/tag/7.1.0",children:"View the release on GitHub \u2192"})}),"\n",(0,r.jsx)(n.h2,{id:"highlights",children:"Highlights"}),"\n",(0,r.jsx)(n.h3,{id:"simplified-fetchproducts-api",children:"Simplified fetchProducts API"}),"\n",(0,r.jsxs)(n.p,{children:["The biggest change in 7.1 is the simplification of the ",(0,r.jsx)(n.code,{children:"fetchProducts()"})," method. Instead of returning a ",(0,r.jsx)(n.code,{children:"FetchProductsResult"})," union type that needs unwrapping, it now returns a list directly."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Before (7.0)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final result = await iap.fetchProducts(\n  skus: ['product_id'],\n  type: ProductQueryType.InApp,\n);\n\nif (result is FetchProductsResultProducts) {\n  final products = result.value ?? [];\n  for (final product in products) {\n    print('${product.title}: ${product.displayPrice}');\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"After (7.1)"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final List<Product> products = await iap.fetchProducts(\n  skus: ['product_id'],\n  type: ProductQueryType.InApp,\n);\n\nfor (final product in products) {\n  print('${product.title}: ${product.displayPrice}');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simpler API"}),": No more union type unwrapping with ",(0,r.jsx)(n.code,{children:".value"})," or checking ",(0,r.jsx)(n.code,{children:"is FetchProductsResultProducts"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleaner Code"}),": Direct iteration over products without intermediate steps"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Explicit type annotations provide full IDE support and compile-time safety"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better DX"}),": More intuitive API that's easier to learn and use"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"type-annotations",children:"Type Annotations"}),"\n",(0,r.jsx)(n.p,{children:"To get proper type inference, use explicit type annotations on the variable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// In-app products\nfinal List<Product> products = await iap.fetchProducts(\n  skus: ['coins_100', 'remove_ads'],\n  type: ProductQueryType.InApp,\n);\n\n// Subscriptions\nfinal List<ProductSubscription> subscriptions = await iap.fetchProducts(\n  skus: ['premium_monthly', 'premium_yearly'],\n  type: ProductQueryType.Subs,\n);\n\n// All products (both in-app and subscriptions)\nfinal List<ProductCommon> allProducts = await iap.fetchProducts(\n  skus: ['coins_100', 'premium_monthly'],\n  type: ProductQueryType.All,\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"migration-from-70",children:"Migration from 7.0"}),"\n",(0,r.jsx)(n.p,{children:"Migrating from 7.0 to 7.1 is straightforward:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// 7.0: Unwrap union type\nfinal result = await iap.fetchProducts(\n  skus: productIds,\n  type: ProductQueryType.InApp,\n);\nfinal products = result.value ?? [];\n\n// 7.1: Direct list with explicit type\nfinal List<Product> products = await iap.fetchProducts(\n  skus: productIds,\n  type: ProductQueryType.InApp,\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,r.jsx)(n.h3,{id:"fetchproducts-return-type",children:"fetchProducts Return Type"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Before"}),": Returns ",(0,r.jsx)(n.code,{children:"Future<FetchProductsResult>"})," (union type)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"After"}),": Returns ",(0,r.jsx)(n.code,{children:"Future<List<dynamic>>"})," (requires explicit type annotation)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"required-changes",children:"Required Changes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add explicit type annotation to variable declarations"}),"\n",(0,r.jsxs)(n.li,{children:["Remove ",(0,r.jsx)(n.code,{children:".value"})," or ",(0,r.jsx)(n.code,{children:".products"})," getter calls"]}),"\n",(0,r.jsxs)(n.li,{children:["Remove union type checks (",(0,r.jsx)(n.code,{children:"is FetchProductsResultProducts"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"full-example",children:"Full Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example showing the new API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass ProductStore {\n  final _iap = FlutterInappPurchase.instance;\n\n  Future<void> loadProducts() async {\n    // Initialize connection\n    await _iap.initConnection();\n\n    // Load in-app products\n    final List<Product> inAppProducts = await _iap.fetchProducts(\n      skus: ['coins_100', 'coins_500', 'remove_ads'],\n      type: ProductQueryType.InApp,\n    );\n\n    // Load subscriptions\n    final List<ProductSubscription> subscriptions = await _iap.fetchProducts(\n      skus: ['premium_monthly', 'premium_yearly'],\n      type: ProductQueryType.Subs,\n    );\n\n    // Use products directly\n    for (final product in inAppProducts) {\n      print('${product.id}: ${product.displayPrice}');\n    }\n\n    for (final sub in subscriptions) {\n      print('${sub.id}: ${sub.displayPrice}');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"why-this-change",children:"Why This Change?"}),"\n",(0,r.jsxs)(n.p,{children:["The previous union type approach (introduced in 7.0) provided strong type safety but added unnecessary complexity for most use cases. User feedback (",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/flutter_inapp_purchase/issues/576",children:"#576"}),") showed that:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The union type unwrapping felt verbose and boilerplate-heavy"}),"\n",(0,r.jsxs)(n.li,{children:["Type inference didn't work as expected with ",(0,r.jsx)(n.code,{children:"for-in"})," loops"]}),"\n",(0,r.jsx)(n.li,{children:"The API was harder to learn for new users"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Version 7.1 strikes a better balance by:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keeping type safety through explicit annotations"}),"\n",(0,r.jsx)(n.li,{children:"Simplifying the common case (direct iteration)"}),"\n",(0,r.jsx)(n.li,{children:"Reducing boilerplate code"}),"\n",(0,r.jsx)(n.li,{children:"Maintaining full compatibility with the OpenIAP specification"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsx)(n.p,{children:"All documentation has been updated to reflect the new API:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hyochan.github.io/flutter_inapp_purchase/docs/api/methods/get-products",children:"fetchProducts API Reference"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hyochan.github.io/flutter_inapp_purchase/docs/getting-started/quickstart",children:"Quick Start Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hyochan.github.io/flutter_inapp_purchase/docs/migration/from-v7.0",children:"Migration Guide from 7.0"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Version 7.0 documentation is still available in the ",(0,r.jsx)(n.a,{href:"https://hyochan.github.io/flutter_inapp_purchase/docs",children:"version dropdown"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"credits",children:"Credits"}),"\n",(0,r.jsxs)(n.p,{children:["Special thanks to ",(0,r.jsx)(n.a,{href:"https://github.com/matifdeveloper",children:"@matifdeveloper"})," for reporting the type inference issue in ",(0,r.jsx)(n.a,{href:"https://github.com/hyochan/flutter_inapp_purchase/issues/576",children:"#576"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,r.jsx)(n.p,{children:"We continue to focus on:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OpenIAP specification compliance"}),"\n",(0,r.jsx)(n.li,{children:"Better developer experience"}),"\n",(0,r.jsx)(n.li,{children:"Comprehensive documentation"}),"\n",(0,r.jsx)(n.li,{children:"Community feedback and improvements"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Try out 7.1.0 and let us know your feedback!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  flutter_inapp_purchase: ^7.1.0\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5086:e=>{e.exports=JSON.parse('{"permalink":"/flutter_inapp_purchase/blog/7.1.0-release","editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/blog/2025-10-07-7.1.0.release.md","source":"@site/blog/2025-10-07-7.1.0.release.md","title":"Release 7.1.0 - Simplified API with Direct List Returns","description":"Release 7.1.0 simplifies the fetchProducts() API by returning lists directly instead of union types, making it easier to work with products while maintaining type safety through explicit type annotations.","date":"2025-10-07T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/flutter_inapp_purchase/blog/tags/release","description":"New version releases and updates"},{"inline":false,"label":"Flutter","permalink":"/flutter_inapp_purchase/blog/tags/flutter","description":"Flutter framework related topics"},{"inline":false,"label":"In-App Purchase","permalink":"/flutter_inapp_purchase/blog/tags/in-app-purchase","description":"In-app purchase implementation and best practices"},{"inline":false,"label":"Breaking Change","permalink":"/flutter_inapp_purchase/blog/tags/breaking-change","description":"Breaking changes and migration guides"},{"inline":true,"label":"type-inference","permalink":"/flutter_inapp_purchase/blog/tags/type-inference"}],"readingTime":2.99,"hasTruncateMarker":true,"authors":[{"name":"Hyo","title":"Maintainer of flutter_inapp_purchase & expo-iap","url":"https://github.com/hyochan","page":{"permalink":"/flutter_inapp_purchase/blog/authors/hyochan"},"socials":{"x":"https://x.com/hyodotdev","github":"https://github.com/hyochan"},"imageURL":"https://github.com/hyochan.png","key":"hyochan"}],"frontMatter":{"slug":"7.1.0-release","title":"Release 7.1.0 - Simplified API with Direct List Returns","authors":["hyochan"],"tags":["release","flutter","in-app-purchase","breaking-change","type-inference"],"date":"2025-10-07T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"7.1.13 - Horizon OS Support for Meta Quest Devices","permalink":"/flutter_inapp_purchase/blog/horizon-os-support"},"nextItem":{"title":"Release 7.0.0 - OpenIAP GQL 1.0.10, Type Safety & Alternative Billing","permalink":"/flutter_inapp_purchase/blog/7.0.0-release"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);