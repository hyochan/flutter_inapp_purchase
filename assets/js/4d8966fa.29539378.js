"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[5833],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}},8509:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guides/subscription-offers","title":"Subscription Offers","description":"Handle subscription purchases, upgrades, downgrades, and promotional offers.","source":"@site/versioned_docs/version-7.0/guides/subscription-offers.md","sourceDirName":"guides","slug":"/guides/subscription-offers","permalink":"/flutter_inapp_purchase/docs/7.0/guides/subscription-offers","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-7.0/guides/subscription-offers.md","tags":[],"version":"7.0","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Subscription Offers"}}');var r=i(4848),a=i(8453);const t={sidebar_position:3,title:"Subscription Offers"},o="Subscription Offers",c={},l=[{value:"Fetch Subscription Products",id:"fetch-subscription-products",level:2},{value:"Basic Subscription Purchase",id:"basic-subscription-purchase",level:2},{value:"Android with Offers",id:"android-with-offers",level:3},{value:"iOS Subscription",id:"ios-subscription",level:3},{value:"Upgrade/Downgrade Subscriptions (Android)",id:"upgradedowngrade-subscriptions-android",level:2},{value:"Replacement Modes (Android)",id:"replacement-modes-android",level:2},{value:"Check Active Subscriptions",id:"check-active-subscriptions",level:2},{value:"Quick Check (Lightweight)",id:"quick-check-lightweight",level:3},{value:"Detailed Purchase Information",id:"detailed-purchase-information",level:3},{value:"Get Purchase History (iOS)",id:"get-purchase-history-ios",level:3},{value:"Handle Subscription Purchase",id:"handle-subscription-purchase",level:2},{value:"iOS Promotional Offers",id:"ios-promotional-offers",level:2},{value:"Check Eligibility",id:"check-eligibility",level:3},{value:"Apply Promotional Offer",id:"apply-promotional-offer",level:3},{value:"Manage Subscriptions",id:"manage-subscriptions",level:2},{value:"Restore Purchases",id:"restore-purchases",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"subscription-offers",children:"Subscription Offers"})}),"\n",(0,r.jsx)(n.p,{children:"Handle subscription purchases, upgrades, downgrades, and promotional offers."}),"\n",(0,r.jsx)(n.h2,{id:"fetch-subscription-products",children:"Fetch Subscription Products"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final subscriptions = await iap.fetchProducts(\n  skus: ['monthly_sub', 'yearly_sub'],\n  type: ProductQueryType.subs,\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-subscription-purchase",children:"Basic Subscription Purchase"}),"\n",(0,r.jsx)(n.h3,{id:"android-with-offers",children:"Android with Offers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Get available offers for Android\nList<AndroidSubscriptionOfferInput> getAndroidOffers(ProductCommon product) {\n  if (product is ProductAndroid) {\n    final details = product.subscriptionOfferDetailsAndroid;\n    if (details != null && details.isNotEmpty) {\n      return [\n        for (final offer in details)\n          AndroidSubscriptionOfferInput(\n            offerToken: offer.offerToken,\n            sku: product.id, // Use productId, not basePlanId\n          ),\n      ];\n    }\n  }\n  return [];\n}\n\n// Purchase subscription with offers\nFuture<void> purchaseSubscription(ProductCommon product) async {\n  if (Platform.isAndroid) {\n    final offers = getAndroidOffers(product);\n    final requestProps = RequestPurchaseProps.subs((\n      ios: null,\n      android: RequestSubscriptionAndroidProps(\n        skus: [product.id],\n        subscriptionOffers: offers.isNotEmpty ? offers : null,\n      ),\n      useAlternativeBilling: null,\n    ));\n\n    await iap.requestPurchase(requestProps);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ios-subscription",children:"iOS Subscription"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Future<void> purchaseSubscriptionIOS(ProductCommon product) async {\n  final requestProps = RequestPurchaseProps.subs((\n    ios: RequestSubscriptionIosProps(\n      sku: product.id,\n    ),\n    android: null,\n    useAlternativeBilling: null,\n  ));\n\n  await iap.requestPurchase(requestProps);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"upgradedowngrade-subscriptions-android",children:"Upgrade/Downgrade Subscriptions (Android)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Future<void> upgradeSubscription(\n  ProductCommon newProduct,\n  Purchase currentSubscription,\n  int replacementMode,\n) async {\n  final requestProps = RequestPurchaseProps.subs((\n    ios: null,\n    android: RequestSubscriptionAndroidProps(\n      skus: [newProduct.id],\n      oldSkus: [currentSubscription.productId],\n      purchaseTokenAndroid: currentSubscription.purchaseToken,\n      replacementModeAndroid: replacementMode,\n    ),\n    useAlternativeBilling: null,\n  ));\n\n  await iap.requestPurchase(requestProps);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"replacement-modes-android",children:"Replacement Modes (Android)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Use AndroidReplacementMode enum\nAndroidReplacementMode.withTimeProration.value         // 1: Credit unused time\nAndroidReplacementMode.chargeProratedPrice.value       // 2: Charge difference now\nAndroidReplacementMode.withoutProration.value          // 3: No credit\nAndroidReplacementMode.deferred.value                  // 4: Apply at next renewal\nAndroidReplacementMode.chargeFullPrice.value           // 5: Charge full price now\n"})}),"\n",(0,r.jsx)(n.h2,{id:"check-active-subscriptions",children:"Check Active Subscriptions"}),"\n",(0,r.jsx)(n.h3,{id:"quick-check-lightweight",children:"Quick Check (Lightweight)"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"getActiveSubscriptions"})," for lightweight subscription status:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Get active subscription summaries (lightweight)\nfinal summaries = await iap.getActiveSubscriptions([\n  'monthly_sub',\n  'yearly_sub',\n]);\n\nfor (final summary in summaries) {\n  print('Product: ${summary.productId}');\n  print('Transaction ID: ${summary.transactionId}');\n  print('Auto-renewing: ${summary.autoRenewingAndroid}');\n  print('Expiration: ${summary.expirationDateIOS}');\n}\n\nfinal hasActiveSubscription = summaries.isNotEmpty;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"detailed-purchase-information",children:"Detailed Purchase Information"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"getAvailablePurchases"})," for full purchase details and transaction info:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Get detailed purchase objects with full transaction info\nfinal purchases = await iap.getAvailablePurchases(\n  onlyIncludeActiveItemsIOS: true,\n);\n\nfor (final purchase in purchases) {\n  print('Product: ${purchase.productId}');\n  print('Purchase token: ${purchase.purchaseToken}');\n  print('Transaction date: ${purchase.transactionDate}');\n  print('Transaction ID: ${purchase.transactionId}');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-purchase-history-ios",children:"Get Purchase History (iOS)"}),"\n",(0,r.jsx)(n.p,{children:"Include expired subscriptions on iOS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Get all purchases including expired subscriptions (iOS only)\nfinal allPurchases = await iap.getAvailablePurchases(\n  onlyIncludeActiveItemsIOS: false,\n  alsoPublishToEventListenerIOS: false,\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"handle-subscription-purchase",children:"Handle Subscription Purchase"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"StreamSubscription<Purchase>? _purchaseSubscription;\n\nvoid setupListener() {\n  _purchaseSubscription = iap.purchaseUpdatedListener.listen(\n    (purchase) async {\n      // Check purchase state\n      bool isPurchased = false;\n\n      if (Platform.isAndroid && purchase is PurchaseAndroid) {\n        isPurchased = purchase.purchaseState == PurchaseState.purchased ||\n            purchase.androidPurchaseStateValue ==\n                AndroidPurchaseState.purchased.value;\n      } else if (purchase is PurchaseIOS) {\n        isPurchased = purchase.iosTransactionState ==\n            TransactionState.purchased;\n      }\n\n      if (isPurchased) {\n        // Validate on server\n        final isValid = await verifyPurchaseOnServer(purchase);\n        if (!isValid) return;\n\n        // Activate subscription\n        await activateSubscription(purchase.productId);\n\n        // Finish transaction\n        await iap.finishTransaction(\n          purchase: purchase,\n          isConsumable: false, // Subscriptions are non-consumable\n        );\n      }\n    },\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"ios-promotional-offers",children:"iOS Promotional Offers"}),"\n",(0,r.jsx)(n.h3,{id:"check-eligibility",children:"Check Eligibility"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final isEligible = await iap.isEligibleForIntroOfferIOS(\n  groupID: 'subscription_group_id',\n);\n\nif (isEligible) {\n  // Show promotional price\n  print('Eligible for intro offer');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"apply-promotional-offer",children:"Apply Promotional Offer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final requestProps = RequestPurchaseProps.subs((\n  ios: RequestSubscriptionIosProps(\n    sku: 'monthly_sub',\n    withOffer: PurchaseOfferIOS(\n      id: 'promo_offer_id',\n      keyId: 'key_identifier',\n      nonce: nonceValue,\n      signature: signatureValue,\n      timestamp: DateTime.now().millisecondsSinceEpoch,\n    ),\n  ),\n  android: null,\n  useAlternativeBilling: null,\n));\n\nawait iap.requestPurchase(requestProps);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"manage-subscriptions",children:"Manage Subscriptions"}),"\n",(0,r.jsx)(n.p,{children:"Open native subscription management UI:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Future<void> manageSubscriptions() async {\n  if (Platform.isIOS) {\n    await iap.showManageSubscriptionsIOS();\n  } else if (Platform.isAndroid) {\n    await iap.deepLinkToSubscriptions(\n      skuAndroid: 'monthly_sub',\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"restore-purchases",children:"Restore Purchases"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"Future<void> restorePurchases() async {\n  // Get all available purchases\n  final purchases = await iap.getAvailablePurchases();\n\n  // Remove duplicates by productId, keeping most recent\n  final uniquePurchases = <String, Purchase>{};\n  for (final purchase in purchases) {\n    final existing = uniquePurchases[purchase.productId];\n    if (existing == null ||\n        purchase.transactionDate.compareTo(existing.transactionDate) > 0) {\n      uniquePurchases[purchase.productId] = purchase;\n    }\n  }\n\n  print('Restored ${uniquePurchases.length} unique purchase(s)');\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Server-side validation"})," - Always validate subscriptions on your backend"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle states properly"})," - Check both ",(0,r.jsx)(n.code,{children:"purchaseState"})," and platform-specific states"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Avoid duplicate processing"})," - Track processed transaction IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test proration"})," - Test upgrade/downgrade flows thoroughly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor renewals"})," - Check subscription status regularly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"../examples/subscription-flow",children:"Subscription Flow Example"})," for full implementation with:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Subscription purchase flow"}),"\n",(0,r.jsx)(n.li,{children:"Upgrade/downgrade handling"}),"\n",(0,r.jsx)(n.li,{children:"Proration mode selection"}),"\n",(0,r.jsx)(n.li,{children:"Active subscription checking"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./subscription-validation",children:"Subscription Validation"})," - Validate subscriptions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./error-handling",children:"Error Handling"})," - Handle subscription errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./offer-code-redemption",children:"Offer Code Redemption"})," - iOS offer codes"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);