"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[6219],{6302:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/listeners","title":"Listeners","description":"Real-time event streams for monitoring purchase transactions and errors in flutterinapppurchase v7.0.","source":"@site/docs/api/listeners.md","sourceDirName":"api","slug":"/api/listeners","permalink":"/flutter_inapp_purchase/docs/api/listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/docs/api/listeners.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Listeners","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Core Methods","permalink":"/flutter_inapp_purchase/docs/api/core-methods"},"next":{"title":"Error Handling","permalink":"/flutter_inapp_purchase/docs/api/error-codes"}}');var i=n(4848),a=n(8453);const t={title:"Listeners",sidebar_position:4},l="Event Listeners",c={},o=[{value:"Core Event Streams",id:"core-event-streams",level:2},{value:"purchaseUpdatedListener",id:"purchaseupdatedlistener",level:3},{value:"purchaseErrorListener",id:"purchaseerrorlistener",level:3},{value:"Complete Listener Setup",id:"complete-listener-setup",level:2},{value:"Full Implementation Example",id:"full-implementation-example",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Set Up Listeners Before initConnection",id:"1-set-up-listeners-before-initconnection",level:3},{value:"2. Always Cancel in Dispose",id:"2-always-cancel-in-dispose",level:3},{value:"3. Handle Stream Errors",id:"3-handle-stream-errors",level:3},{value:"4. Don&#39;t Block the Listener",id:"4-dont-block-the-listener",level:3},{value:"Platform-Specific Purchase Handling",id:"platform-specific-purchase-handling",level:2},{value:"iOS Purchase",id:"ios-purchase",level:3},{value:"Android Purchase",id:"android-purchase",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Missing Purchases",id:"missing-purchases",level:3},{value:"Memory Leaks",id:"memory-leaks",level:3},{value:"userChoiceBillingListener",id:"userchoicebillinglistener",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"event-listeners",children:"Event Listeners"})}),"\n",(0,i.jsx)(r.p,{children:"Real-time event streams for monitoring purchase transactions and errors in flutter_inapp_purchase v7.0."}),"\n",(0,i.jsx)(r.p,{children:"All listeners are available through the singleton instance:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"final iap = FlutterInappPurchase.instance;\n"})}),"\n",(0,i.jsx)(r.h2,{id:"core-event-streams",children:"Core Event Streams"}),"\n",(0,i.jsx)(r.h3,{id:"purchaseupdatedlistener",children:"purchaseUpdatedListener"}),"\n",(0,i.jsx)(r.p,{children:"Stream for successful purchase completions."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"Stream<Purchase> get purchaseUpdatedListener\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Type"}),": ",(0,i.jsx)(r.code,{children:"Stream<Purchase>"})," (non-nullable)\n",(0,i.jsx)(r.strong,{children:"Emits"}),": Purchase completion events"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"StreamSubscription<Purchase>? _purchaseSubscription;\n\nvoid setupPurchaseListener() {\n  _purchaseSubscription = iap.purchaseUpdatedListener.listen(\n    (purchase) {\n      handlePurchaseSuccess(purchase);\n    },\n    onError: (error) {\n      debugPrint('Purchase stream error: $error');\n    },\n  );\n}\n\nFuture<void> handlePurchaseSuccess(Purchase purchase) async {\n  debugPrint('Purchase completed: ${purchase.productId}');\n\n  try {\n    // 1. Verify the purchase (recommended)\n    final isValid = await verifyPurchaseOnServer(purchase);\n    if (!isValid) {\n      debugPrint('Purchase verification failed');\n      return;\n    }\n\n    // 2. Deliver the product to user\n    await deliverProduct(purchase.productId);\n\n    // 3. Finish the transaction\n    await iap.finishTransaction(\n      purchase: purchase,\n      isConsumable: true, // Set appropriately for your product\n    );\n\n    debugPrint('Purchase processed successfully');\n  } catch (e) {\n    debugPrint('Error processing purchase: $e');\n  }\n}\n\n@override\nvoid dispose() {\n  _purchaseSubscription?.cancel();\n  super.dispose();\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Purchase Types"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"PurchaseIOS"})," - iOS purchases with iOS-specific fields"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"PurchaseAndroid"})," - Android purchases with Android-specific fields"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"purchaseerrorlistener",children:"purchaseErrorListener"}),"\n",(0,i.jsx)(r.p,{children:"Stream for purchase failures and errors."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"Stream<PurchaseError> get purchaseErrorListener\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Type"}),": ",(0,i.jsx)(r.code,{children:"Stream<PurchaseError>"})," (non-nullable)\n",(0,i.jsx)(r.strong,{children:"Emits"}),": Purchase error events"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"StreamSubscription<PurchaseError>? _errorSubscription;\n\nvoid setupErrorListener() {\n  _errorSubscription = iap.purchaseErrorListener.listen(\n    (error) {\n      handlePurchaseError(error);\n    },\n  );\n}\n\nvoid handlePurchaseError(PurchaseError error) {\n  debugPrint('Purchase failed: ${error.message}');\n  debugPrint('Error code: ${error.code}');\n\n  switch (error.code) {\n    case ErrorCode.UserCancelled:\n      // Don't show error for user cancellation\n      debugPrint('User cancelled the purchase');\n      break;\n\n    case ErrorCode.NetworkError:\n      showUserMessage('Network error. Please check your connection and try again.');\n      break;\n\n    case ErrorCode.AlreadyOwned:\n      showUserMessage('You already own this item.');\n      // Optionally trigger restore purchases\n      restorePreviousPurchases();\n      break;\n\n    default:\n      showUserMessage('Purchase failed: ${error.message}');\n  }\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Common Error Codes"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ErrorCode.UserCancelled"})," - User cancelled"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ErrorCode.NetworkError"})," - Network error"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ErrorCode.ServiceError"})," - Service unavailable"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ErrorCode.ItemUnavailable"})," - Item unavailable"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"ErrorCode.AlreadyOwned"})," - Already owned"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["See ",(0,i.jsx)(r.a,{href:"./types/error-codes",children:"Error Codes"})," for complete list."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"complete-listener-setup",children:"Complete Listener Setup"}),"\n",(0,i.jsx)(r.h3,{id:"full-implementation-example",children:"Full Implementation Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"class IAPListenerManager {\n  final _iap = FlutterInappPurchase.instance;\n\n  StreamSubscription<Purchase>? _purchaseSubscription;\n  StreamSubscription<PurchaseError>? _errorSubscription;\n\n  bool _isListening = false;\n\n  void startListening() {\n    if (_isListening) return;\n\n    // Purchase success listener\n    _purchaseSubscription = _iap.purchaseUpdatedListener.listen(\n      (purchase) {\n        _handlePurchaseSuccess(purchase);\n      },\n      onError: (error) {\n        debugPrint('Purchase stream error: $error');\n      },\n    );\n\n    // Purchase error listener\n    _errorSubscription = _iap.purchaseErrorListener.listen(\n      (error) {\n        _handlePurchaseError(error);\n      },\n      onError: (error) {\n        debugPrint('Error stream error: $error');\n      },\n    );\n\n    _isListening = true;\n    debugPrint('IAP listeners started');\n  }\n\n  void stopListening() {\n    _purchaseSubscription?.cancel();\n    _errorSubscription?.cancel();\n\n    _purchaseSubscription = null;\n    _errorSubscription = null;\n\n    _isListening = false;\n    debugPrint('IAP listeners stopped');\n  }\n\n  Future<void> _handlePurchaseSuccess(Purchase purchase) async {\n    // Verify purchase on server\n    final isValid = await verifyPurchaseOnServer(purchase);\n    if (!isValid) return;\n\n    // Deliver content\n    await deliverContent(purchase.productId);\n\n    // Finish transaction\n    await _iap.finishTransaction(\n      purchase: purchase,\n      isConsumable: false,\n    );\n  }\n\n  void _handlePurchaseError(PurchaseError error) {\n    if (error.code == ErrorCode.UserCancelled) return;\n\n    showErrorMessage(error.message);\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-set-up-listeners-before-initconnection",children:"1. Set Up Listeners Before initConnection"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"@override\nvoid initState() {\n  super.initState();\n\n  // Set up listeners FIRST\n  _purchaseSubscription = iap.purchaseUpdatedListener.listen(\n    (purchase) => _handlePurchase(purchase),\n  );\n\n  _errorSubscription = iap.purchaseErrorListener.listen(\n    (error) => _handleError(error),\n  );\n\n  // THEN initialize connection\n  iap.initConnection();\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-always-cancel-in-dispose",children:"2. Always Cancel in Dispose"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"@override\nvoid dispose() {\n  _purchaseSubscription?.cancel();\n  _errorSubscription?.cancel();\n  super.dispose();\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-handle-stream-errors",children:"3. Handle Stream Errors"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"_purchaseSubscription = iap.purchaseUpdatedListener.listen(\n  (purchase) {\n    // Handle success\n  },\n  onError: (error) {\n    debugPrint('Stream error: $error');\n  },\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"4-dont-block-the-listener",children:"4. Don't Block the Listener"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"// \u274c Wrong: Blocking listener with async work\niap.purchaseUpdatedListener.listen((purchase) async {\n  await longRunningTask(purchase); // This blocks other purchases\n});\n\n// \u2705 Correct: Fire and forget\niap.purchaseUpdatedListener.listen((purchase) {\n  _processPurchaseAsync(purchase); // Don't await\n});\n\nFuture<void> _processPurchaseAsync(Purchase purchase) async {\n  // Handle async work here\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"platform-specific-purchase-handling",children:"Platform-Specific Purchase Handling"}),"\n",(0,i.jsx)(r.h3,{id:"ios-purchase",children:"iOS Purchase"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"void _handlePurchase(Purchase purchase) {\n  if (purchase is PurchaseIOS) {\n    debugPrint('iOS Purchase: ${purchase.id}');\n    debugPrint('Transaction state: ${purchase.transactionState}');\n    debugPrint('Receipt: ${purchase.receiptData}');\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"android-purchase",children:"Android Purchase"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"void _handlePurchase(Purchase purchase) {\n  if (purchase is PurchaseAndroid) {\n    debugPrint('Android Purchase: ${purchase.productId}');\n    debugPrint('Purchase state: ${purchase.purchaseState}');\n    debugPrint('Purchase token: ${purchase.purchaseToken}');\n    debugPrint('Acknowledged: ${purchase.acknowledged}');\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(r.h3,{id:"missing-purchases",children:"Missing Purchases"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Symptom"}),": Purchases not appearing in listener"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Solution"}),": Ensure listeners are set up before ",(0,i.jsx)(r.code,{children:"initConnection()"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"// \u2705 Correct order\n_setupListeners();\nawait iap.initConnection();\n"})}),"\n",(0,i.jsx)(r.h3,{id:"memory-leaks",children:"Memory Leaks"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Symptom"}),": App performance degrades over time"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Solution"}),": Always cancel subscriptions"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"@override\nvoid dispose() {\n  _purchaseSubscription?.cancel();\n  _errorSubscription?.cancel();\n  super.dispose();\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"userchoicebillinglistener",children:"userChoiceBillingListener"}),"\n",(0,i.jsxs)(r.p,{children:["Android-only listener for User Choice Billing events. This fires when a user selects alternative billing instead of Google Play billing in the User Choice Billing dialog (only in ",(0,i.jsx)(r.code,{children:"user-choice"})," mode)."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"Stream<UserChoiceBillingResult> get userChoiceBillingListener\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Example:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"import 'dart:io';\nimport 'dart:async';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\n\nclass UserChoiceBillingExample extends StatefulWidget {\n  @override\n  _UserChoiceBillingExampleState createState() => _UserChoiceBillingExampleState();\n}\n\nclass _UserChoiceBillingExampleState extends State<UserChoiceBillingExample> {\n  StreamSubscription<UserChoiceBillingResult>? _userChoiceSubscription;\n\n  @override\n  void initState() {\n    super.initState();\n    _setupUserChoiceBillingListener();\n  }\n\n  Future<void> _setupUserChoiceBillingListener() async {\n    if (!Platform.isAndroid) return;\n\n    // Initialize with user-choice mode\n    await FlutterInappPurchase.instance.initConnection(\n      alternativeBillingModeAndroid: AlternativeBillingModeAndroid.UserChoice,\n    );\n\n    _userChoiceSubscription = FlutterInappPurchase.instance\n        .userChoiceBillingListener.listen((details) {\n      debugPrint('User selected alternative billing');\n      debugPrint('Token: ${details.externalTransactionToken}');\n      debugPrint('Products: ${details.products}');\n\n      _handleUserChoiceBilling(details);\n    });\n  }\n\n  Future<void> _handleUserChoiceBilling(UserChoiceBillingResult details) async {\n    try {\n      // Step 1: Process payment in your payment system\n      final paymentResult = await processPaymentInYourSystem(details.products);\n\n      if (!paymentResult.success) {\n        debugPrint('Payment failed');\n        return;\n      }\n\n      // Step 2: Report token to Google Play backend within 24 hours\n      await reportTokenToGooglePlay(\n        token: details.externalTransactionToken,\n        products: details.products,\n        paymentResult: paymentResult,\n      );\n\n      debugPrint('Alternative billing completed successfully');\n    } catch (error) {\n      debugPrint('Error handling user choice billing: $error');\n    }\n  }\n\n  @override\n  void dispose() {\n    _userChoiceSubscription?.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // ... your widget implementation\n  }\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"UserChoiceBillingResult Properties:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"class UserChoiceBillingResult {\n  final String externalTransactionToken;  // Token to report to Google within 24 hours\n  final List<String> products;            // Product IDs selected by user\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Platform:"})," Android only (requires ",(0,i.jsx)(r.code,{children:"user-choice"})," mode)"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Important:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Only fires when using ",(0,i.jsx)(r.code,{children:"alternativeBillingModeAndroid: AlternativeBillingModeAndroid.UserChoice"})]}),"\n",(0,i.jsx)(r.li,{children:"Token must be reported to Google Play backend within 24 hours"}),"\n",(0,i.jsxs)(r.li,{children:["If user selects Google Play billing instead, ",(0,i.jsx)(r.code,{children:"purchaseUpdatedListener"})," will fire as normal"]}),"\n",(0,i.jsxs)(r.li,{children:["Must clean up subscription in ",(0,i.jsx)(r.code,{children:"dispose()"})," to prevent memory leaks"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Flow:"})}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["User initiates purchase with ",(0,i.jsx)(r.code,{children:"requestPurchase(useAlternativeBilling: true)"})]}),"\n",(0,i.jsx)(r.li,{children:"Google shows User Choice Billing dialog"}),"\n",(0,i.jsxs)(r.li,{children:["If user selects alternative billing \u2192 ",(0,i.jsx)(r.code,{children:"userChoiceBillingListener"})," fires"]}),"\n",(0,i.jsxs)(r.li,{children:["If user selects Google Play \u2192 ",(0,i.jsx)(r.code,{children:"purchaseUpdatedListener"})," fires"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"See also:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"../guides/alternative-billing",children:"Alternative Billing Guide"})," - Complete implementation guide"]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"./core-methods#checkalternativebillingavailabilityandroid",children:"checkAlternativeBillingAvailabilityAndroid()"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"./core-methods#showalternativebillingdialogandroid",children:"showAlternativeBillingDialogAndroid()"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"./core-methods#createalternativebillingtokenandroid",children:"createAlternativeBillingTokenAndroid()"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./core-methods",children:"Core Methods"})," - Methods that trigger these events"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./types",children:"Types"})," - Event data structures"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"./types/error-codes",children:"Error Codes"})," - Error handling reference"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"../guides/lifecycle",children:"Purchase Lifecycle"})," - Complete purchase flow"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"../guides/alternative-billing",children:"Alternative Billing Guide"})," - Alternative billing implementation"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>l});var s=n(6540);const i={},a=s.createContext(i);function t(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);