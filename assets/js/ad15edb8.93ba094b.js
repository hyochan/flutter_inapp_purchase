"use strict";(self.webpackChunkflutter_inapp_purchase_docs=self.webpackChunkflutter_inapp_purchase_docs||[]).push([[7227],{6507:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"getting-started/quickstart","title":"Quick Start","description":"Get up and running with Flutter In-App Purchase in minutes.","source":"@site/versioned_docs/version-7.0/getting-started/quickstart.md","sourceDirName":"getting-started","slug":"/getting-started/quickstart","permalink":"/flutter_inapp_purchase/docs/7.0/getting-started/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/hyochan/flutter_inapp_purchase/tree/main/docs/versioned_docs/version-7.0/getting-started/quickstart.md","tags":[],"version":"7.0","sidebarPosition":4,"frontMatter":{"sidebar_position":4}}');var r=t(4848),i=t(8453);const c={sidebar_position:4},a="Quick Start",o={},u=[{value:"Complete Example",id:"complete-example",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"1. Initialization",id:"1-initialization",level:3},{value:"2. Loading Products",id:"2-loading-products",level:3},{value:"3. Purchase Flow",id:"3-purchase-flow",level:3},{value:"4. Platform Differences",id:"4-platform-differences",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,r.jsx)(n.p,{children:"Get up and running with Flutter In-App Purchase in minutes."}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example implementing a simple store with products and subscriptions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\nimport 'package:flutter_inapp_purchase/flutter_inapp_purchase.dart';\nimport 'dart:async';\n\nclass SimpleStore extends StatefulWidget {\n  @override\n  _SimpleStoreState createState() => _SimpleStoreState();\n}\n\nclass _SimpleStoreState extends State<SimpleStore> {\n  StreamSubscription? _purchaseUpdatedSubscription;\n  StreamSubscription? _purchaseErrorSubscription;\n\n  List<ProductCommon> _products = [];\n  List<ProductCommon> _subscriptions = [];\n  List<Purchase> _purchases = [];\n\n  // Your product IDs from App Store Connect / Google Play Console\n  final List<String> _productIds = [\n    'com.example.coins_100',\n    'com.example.coins_500',\n  ];\n\n  final List<String> _subscriptionIds = [\n    'com.example.premium_monthly',\n    'com.example.premium_yearly',\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    initIAP();\n  }\n\n  @override\n  void dispose() {\n    _purchaseUpdatedSubscription?.cancel();\n    _purchaseErrorSubscription?.cancel();\n    super.dispose();\n  }\n\n  // Initialize the plugin\n  Future<void> initIAP() async {\n    // Use singleton instance\n    final iap = FlutterInappPurchase.instance;\n\n    // Initialize connection\n    await iap.initConnection();\n    print('IAP connection initialized');\n\n    // Set up purchase listeners\n    _purchaseUpdatedSubscription =\n        iap.purchaseUpdated.listen((productItem) {\n      print('Purchase updated: ${productItem?.productId}');\n      _handlePurchaseUpdate(productItem!);\n    });\n\n    _purchaseErrorSubscription =\n        iap.purchaseError.listen((purchaseError) {\n      print('Purchase error: $purchaseError');\n      _showError('Purchase failed: ${purchaseError.message}');\n    });\n\n    // Load products and purchases\n    await _loadProducts();\n    await _getPurchases();\n  }\n\n  // Get available products\n  Future<void> _loadProducts() async {\n    try {\n      // Get consumable products\n      final inAppResult = await FlutterInappPurchase.instance.fetchProducts(\n        ProductRequest(\n          skus: _productIds,\n          type: ProductQueryType.InApp,\n        ),\n      );\n\n      // Get subscriptions\n      final subResult = await FlutterInappPurchase.instance.fetchProducts(\n        ProductRequest(\n          skus: _subscriptionIds,\n          type: ProductQueryType.Subs,\n        ),\n      );\n\n      setState(() {\n        _products = inAppResult.products;\n        _subscriptions = subResult.products;\n      });\n    } catch (e) {\n      _showError('Failed to load products: $e');\n    }\n  }\n\n  // Get previous purchases\n  Future<void> _getPurchases() async {\n    try {\n      List<Purchase>? purchases =\n          await FlutterInappPurchase.instance.getAvailablePurchases();\n\n      setState(() {\n        _purchases = purchases ?? [];\n      });\n    } catch (e) {\n      _showError('Failed to load purchases: $e');\n    }\n  }\n\n  // Handle purchase updates\n  void _handlePurchaseUpdate(Purchase productItem) async {\n    // Verify purchase on your server here\n    bool isValid = await _verifyPurchase(productItem);\n\n    if (isValid) {\n      // Deliver the product to user\n      await _deliverProduct(productItem);\n\n      // Finish the transaction\n      if (Platform.isIOS) {\n        await FlutterInappPurchase.instance.finishTransaction(\n          purchase: productItem,\n          isConsumable: true, // Set based on your product type\n        );\n      } else if (productItem.isConsumableAndroid ?? false) {\n        await FlutterInappPurchase.instance.consumePurchaseAndroid(\n          purchaseToken: productItem.purchaseToken!,\n        );\n      } else {\n        await FlutterInappPurchase.instance.acknowledgePurchaseAndroid(\n          purchaseToken: productItem.purchaseToken!,\n        );\n      }\n\n      // Update UI\n      await _getPurchases();\n      _showSuccess('Purchase successful!');\n    }\n  }\n\n  // Request a purchase\n  Future<void> _requestPurchase(String productId) async {\n    try {\n      final requestProps = RequestPurchaseProps.inApp(\n        request: RequestPurchasePropsByPlatforms(\n          ios: RequestPurchaseIosProps(\n            sku: productId,\n            quantity: 1,\n          ),\n          android: RequestPurchaseAndroidProps(\n            skus: [productId],\n          ),\n        ),\n      );\n\n      await FlutterInappPurchase.instance.requestPurchase(requestProps);\n    } catch (e) {\n      _showError('Purchase failed: $e');\n    }\n  }\n\n  // Request a subscription\n  Future<void> _requestSubscription(String productId) async {\n    try {\n      final requestProps = RequestPurchaseProps.subs(\n        request: RequestSubscriptionPropsByPlatforms(\n          ios: RequestSubscriptionIosProps(\n            sku: productId,\n          ),\n          android: RequestSubscriptionAndroidProps(\n            skus: [productId],\n          ),\n        ),\n      );\n\n      await FlutterInappPurchase.instance.requestPurchase(requestProps);\n    } catch (e) {\n      _showError('Subscription failed: $e');\n    }\n  }\n\n  // Restore purchases\n  Future<void> _restorePurchases() async {\n    try {\n      await FlutterInappPurchase.instance.restorePurchases();\n      await _getPurchases();\n      _showSuccess('Purchases restored!');\n    } catch (e) {\n      _showError('Restore failed: $e');\n    }\n  }\n\n  // Verify purchase (implement your server logic)\n  Future<bool> _verifyPurchase(Purchase item) async {\n    // TODO: Verify receipt with your server\n    // For now, just return true\n    return true;\n  }\n\n  // Deliver product (implement your logic)\n  Future<void> _deliverProduct(Purchase item) async {\n    // TODO: Deliver the product to user\n    print('Delivering product: ${item.productId}');\n  }\n\n  // UI Helper methods\n  void _showError(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(content: Text(message), backgroundColor: Colors.red),\n    );\n  }\n\n  void _showSuccess(String message) {\n    ScaffoldMessenger.of(context).showSnackBar(\n      SnackBar(content: Text(message), backgroundColor: Colors.green),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('In-App Purchase Example'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.restore),\n            onPressed: _restorePurchases,\n            tooltip: 'Restore Purchases',\n          ),\n        ],\n      ),\n      body: SingleChildScrollView(\n        padding: EdgeInsets.all(16),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // Products Section\n            Text('Products', style: Theme.of(context).textTheme.headline6),\n            SizedBox(height: 8),\n            ..._products.map((product) => Card(\n              child: ListTile(\n                title: Text(product.title ?? product.productId ?? ''),\n                subtitle: Text(product.description ?? ''),\n                trailing: TextButton(\n                  child: Text(product.localizedPrice ?? ''),\n                  onPressed: () => _requestPurchase(product.productId!),\n                ),\n              ),\n            )),\n\n            SizedBox(height: 24),\n\n            // Subscriptions Section\n            Text('Subscriptions', style: Theme.of(context).textTheme.headline6),\n            SizedBox(height: 8),\n            ..._subscriptions.map((subscription) => Card(\n              child: ListTile(\n                title: Text(subscription.title ?? subscription.productId ?? ''),\n                subtitle: Text(subscription.description ?? ''),\n                trailing: TextButton(\n                  child: Text(subscription.localizedPrice ?? ''),\n                  onPressed: () => _requestPurchase(subscription.productId!),\n                ),\n                leading: _isPurchased(subscription.productId!)\n                    ? Icon(Icons.check_circle, color: Colors.green)\n                    : null,\n              ),\n            )),\n\n            SizedBox(height: 24),\n\n            // Active Purchases Section\n            Text('Active Purchases', style: Theme.of(context).textTheme.headline6),\n            SizedBox(height: 8),\n            if (_purchases.isEmpty)\n              Text('No active purchases'),\n            ..._purchases.map((purchase) => Card(\n              child: ListTile(\n                title: Text(purchase.productId ?? 'Unknown'),\n                subtitle: Text('Purchased: ${DateTime.fromMillisecondsSinceEpoch(\n                  purchase.transactionDate ?? 0\n                )}'),\n              ),\n            )),\n          ],\n        ),\n      ),\n    );\n  }\n\n  bool _isPurchased(String productId) {\n    return _purchases.any((purchase) => purchase.productId == productId);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"1-initialization",children:"1. Initialization"}),"\n",(0,r.jsx)(n.p,{children:"Always initialize the connection before using any other methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"await FlutterInappPurchase.instance.initConnection();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-loading-products",children:"2. Loading Products"}),"\n",(0,r.jsx)(n.p,{children:"Fetch products using their IDs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Regular products\nList<ProductCommon> products = await FlutterInappPurchase.instance\n    .fetchProducts(skus: ['product_id_1', 'product_id_2'], type: PurchaseType.inapp);\n\n// Subscriptions\nList<ProductCommon> subscriptions = await FlutterInappPurchase.instance\n    .fetchProducts(skus: ['subscription_id_1', 'subscription_id_2'], type: PurchaseType.subs);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-purchase-flow",children:"3. Purchase Flow"}),"\n",(0,r.jsx)(n.p,{children:"Listen to purchase updates and handle them appropriately:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Listen to successful purchases\nFlutterInappPurchase.purchaseUpdated.listen((productItem) {\n  // 1. Verify purchase\n  // 2. Deliver content\n  // 3. Finish transaction\n});\n\n// Listen to purchase errors\nFlutterInappPurchase.purchaseError.listen((error) {\n  // Handle error\n});\n\n// Request a purchase\nawait FlutterInappPurchase.instance.requestPurchase(\n  request: RequestPurchase(\n    ios: RequestPurchaseIOS(sku: 'product_id'),\n    android: RequestPurchaseAndroid(skus: ['product_id']),\n  ),\n  type: PurchaseType.inapp, // or PurchaseType.subs for subscriptions\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-platform-differences",children:"4. Platform Differences"}),"\n",(0,r.jsx)(n.p,{children:"Handle platform-specific requirements:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"if (Platform.isIOS) {\n  // iOS: Always finish transactions\n  await FlutterInappPurchase.instance.finishTransaction(\n    purchase: item,\n    isConsumable: isConsumable,\n  );\n} else {\n  // Android: Acknowledge or consume\n  if (isConsumable) {\n    await FlutterInappPurchase.instance.consumePurchaseAndroid(\n      purchaseToken: item.purchaseToken!,\n    );\n  } else {\n    await FlutterInappPurchase.instance.acknowledgePurchaseAndroid(\n      purchaseToken: item.purchaseToken!,\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Always verify purchases"})," server-side before delivering content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle all error cases"})," to provide good user experience"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test thoroughly"})," with sandbox/test accounts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Restore purchases"})," when users reinstall or switch devices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean up listeners"})," in dispose() to prevent memory leaks"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../guides/products",children:"Products Guide"})," - Working with consumable products"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../guides/subscriptions",children:"Subscriptions Guide"})," - Implementing subscriptions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../guides/error-handling",children:"Error Handling"})," - Handling edge cases"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);